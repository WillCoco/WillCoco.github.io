{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1506751878000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1506751878000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1506751878000},{"_id":"themes/next/.gitignore","hash":"32ea93f21d8693d5d8fa4eef1c51a21ad0670047","modified":1506751878000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1506751878000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1506751878000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1506751878000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1506751878000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1506751878000},{"_id":"themes/next/_config.yml","hash":"5bf0cf9545c81d2403f6dd34151a4543d019bf84","modified":1518529197000},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1506751878000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1506751878000},{"_id":"themes/next/README.en.md","hash":"32d6cdfec1447f54aae1d7f1365ce6733dfcec8f","modified":1506751878000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1506751878000},{"_id":"themes/next/bower.json","hash":"7d7938f9da896fe710aa0e9120140e528bf058df","modified":1506751878000},{"_id":"themes/next/package.json","hash":"193dad6f59a588908fac082cc46fe067dac1b84d","modified":1506751878000},{"_id":"source/_drafts/node-sqilte3-api.md","hash":"b8569e152c351c88eada60a8b778ac623d9b5261","modified":1516262120000},{"_id":"source/_posts/Flow-JS类型检测工具.md","hash":"c8fca2e206d54fce6b9de323a115d4c0e8d65e7d","modified":1513841124000},{"_id":"source/_posts/React样式实践.md","hash":"2455414db383e139559ba7642a1382a9f3ae4cdd","modified":1513783824000},{"_id":"source/_posts/electron打包后表单控件复制粘贴失效解决办法-1.md","hash":"de7dec1f405b452d394f084ba46d605e3c2b235a","modified":1510373280000},{"_id":"source/_posts/node-sqilte3.md","hash":"3c2b10aeae4328616d94fcf5afc745c707e97973","modified":1518021902000},{"_id":"source/_posts/类型检测.md","hash":"c40bb3600a4addb2a6cfc842bfce9bc46645c7e1","modified":1513784304000},{"_id":"source/_posts/热更新demo.md","hash":"14dc6ebba23e82037292cc9cd709fdb23df0be76","modified":1517279311000},{"_id":"source/tags/index.md","hash":"7165ed5db292782882e0f6b9d51140c14b53881d","modified":1518057116000},{"_id":"source/about/index.html","hash":"ef129711753f664af6169997f7924d33602f74b7","modified":1518608819000},{"_id":"themes/next/.git/HEAD","hash":"75173e2dd18a6221ff84742ff53d01ac5c6e04b0","modified":1506751878000},{"_id":"themes/next/.git/config","hash":"510faaf0899b89e8a0a0a7ebeff0d4b0aa5ad38f","modified":1506751557000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1506751553000},{"_id":"themes/next/.git/index","hash":"fcc8c3dbc9c3c6033aa60e1f0eb5d9a177c172b3","modified":1512616083000},{"_id":"themes/next/.git/packed-refs","hash":"c55a86bcf901924b257443b85aa5f5b1b610f6e6","modified":1506751878000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1506751878000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"b56c01cdfc6ee7ffea8a8a9fa149263f368caef6","modified":1506751878000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"37bd0ec1d655c601946fc5f5ac2fe8ed1e529b77","modified":1506751878000},{"_id":"themes/next/languages/de.yml","hash":"306db8c865630f32c6b6260ade9d3209fbec8011","modified":1506751878000},{"_id":"themes/next/languages/id.yml","hash":"2835ea80dadf093fcf47edd957680973f1fb6b85","modified":1506751878000},{"_id":"themes/next/languages/fr-FR.yml","hash":"24180322c83587a153cea110e74e96eacc3355ad","modified":1506751878000},{"_id":"themes/next/languages/default.yml","hash":"4cc6aeb1ac09a58330e494c8771773758ab354af","modified":1506751878000},{"_id":"themes/next/languages/pt-BR.yml","hash":"958e49571818a34fdf4af3232a07a024050f8f4e","modified":1506751878000},{"_id":"themes/next/languages/en.yml","hash":"e7def07a709ef55684490b700a06998c67f35f39","modified":1506751878000},{"_id":"themes/next/languages/ja.yml","hash":"1c3a05ab80a6f8be63268b66da6f19da7aa2c638","modified":1506751878000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3c0c7dfd0256457ee24df9e9879226c58cb084b5","modified":1506751878000},{"_id":"themes/next/languages/pt.yml","hash":"36c8f60dacbe5d27d84d0e0d6974d7679f928da0","modified":1506751878000},{"_id":"themes/next/languages/ko.yml","hash":"be150543379150f78329815af427bf152c0e9431","modified":1506751878000},{"_id":"themes/next/languages/zh-tw.yml","hash":"0b2c18aa76570364003c8d1cd429fa158ae89022","modified":1506751878000},{"_id":"themes/next/layout/_layout.swig","hash":"06b1eab2e00273e0b94bd32dc682bd92c1e0a747","modified":1518499238000},{"_id":"themes/next/languages/zh-hk.yml","hash":"1c917997413bf566cb79e0975789f3c9c9128ccd","modified":1506751878000},{"_id":"themes/next/languages/ru.yml","hash":"1549a7c2fe23caa7cbedcd0aa2b77c46e57caf27","modified":1506751878000},{"_id":"themes/next/layout/index.swig","hash":"03e8a2cda03bad42ac0cb827025eb81f95d496a2","modified":1518612811000},{"_id":"themes/next/layout/archive.swig","hash":"383f64deab105724fd5512371963bd9e9aafbffd","modified":1506751878000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1506751878000},{"_id":"themes/next/layout/page.swig","hash":"37c874cd720acf0eda8d26e063278f2b6ae8d3a6","modified":1506751878000},{"_id":"themes/next/layout/post.swig","hash":"2d5f8d7f0a96b611e2d5a5e4d111fc17726a990f","modified":1506751878000},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1506751878000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1506751878000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1506751878000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1506751878000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1506751878000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1506751878000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1506751878000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1506751878000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1506751553000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1506751553000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1506751553000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1506751553000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1506751553000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1506751553000},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1506751553000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1506751553000},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1506751553000},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1506751553000},{"_id":"themes/next/.git/logs/HEAD","hash":"6b20a7fa695f865f3bd76c2af92093bf64f883c6","modified":1506751878000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1506751553000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"53d4f83b2b7fb4387dfc9fe81519abd56fbce4ae","modified":1506751878000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"5d5f70deb6074cb4dd0438463e14ccf89213c282","modified":1506751878000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1506751878000},{"_id":"themes/next/layout/_macro/post.swig","hash":"911363776867d9523a3e322cdf591d49cd166403","modified":1506751878000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"faa7886ccf986890cd776f4e9d70cb89fe9fda5f","modified":1506751878000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1506751878000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1506751878000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1506751878000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"ce7094ee05878161e7568a6dfae5b56ff3fbd6e1","modified":1506751878000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1506751878000},{"_id":"themes/next/layout/_partials/head.swig","hash":"1f14d3f494b2dbbcee802fd6f6d1abd5b7e2304c","modified":1506751878000},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1506751878000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1506751878000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1506751878000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1506751878000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1506751878000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1506751878000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9baf90f7c40b3b10f288e9268c3191e895890cea","modified":1506751878000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1506751878000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1506751878000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1506751878000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1506751878000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1506751878000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1506751878000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1506751878000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1506751878000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1506751878000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1506751878000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1506751878000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1506751878000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1506751878000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1506751878000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1506751878000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1506751878000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1506751878000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1506751878000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1506751878000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1506751878000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1506751878000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1506751878000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1506751878000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1506751878000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1506751878000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1506751878000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1506751878000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1506751878000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1506751878000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1506751878000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1506751878000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1506751878000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1506751878000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1506751878000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1506751878000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1506751878000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1506751878000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1506751878000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1506751878000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1506751878000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1506751878000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1506751878000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1506751878000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1506751878000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1506751878000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1506751878000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1506751878000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1506751878000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1506751878000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1506751878000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1506751878000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1506751878000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1506751878000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1506751878000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1506751878000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1506751878000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1506751878000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"3358d11b9a26185a2d36c96049e4340e701646e4","modified":1506751878000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1506751878000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1506751878000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1506751878000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1506751878000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1506751878000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1506751878000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1506751878000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1506751878000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"ee63aa2e49507b884a2d56778479cf01c723d751","modified":1506751878000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1506751878000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1506751878000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1506751878000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1506751878000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1506751878000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"eaedfaf06dae94ba77a8f4893e2e434bf8859bac","modified":1506751878000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1506751878000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1506751878000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"49b5210fa62d6cbc6a98f57d89d5067a06ab3561","modified":1506751878000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1506751878000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"cfee25d790e4f9b7d57f0dc7e2ea9c1649f08f11","modified":1506751878000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d477196c5699c8261b08e993a77ef67054d86166","modified":1506751878000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1506751878000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1506751878000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"6117f97b4984b8e33f21c726132da64ba678e4ed","modified":1506751878000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1506751878000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1506751878000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1506751878000},{"_id":"themes/next/source/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1506751878000},{"_id":"themes/next/source/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1506751878000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1506751878000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1506751878000},{"_id":"themes/next/source/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1506751878000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1506751878000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1506751878000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1506751878000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1506751878000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1506751878000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1506751878000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1506751878000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1506751878000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1506751878000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1506751878000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1506751878000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1506751878000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1506751878000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1506751878000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1506751878000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1506751878000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1506751878000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1506751878000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1506751878000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1506751878000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1506751878000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1506751878000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1506751878000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1506751878000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1506751878000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1506751878000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1506751878000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1506751878000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1506751878000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1506751878000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1506751878000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1506751878000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1506751878000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1506751878000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1506751878000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1506751878000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1506751878000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1506751878000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1506751878000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1506751878000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1506751878000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1506751878000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1506751878000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1506751878000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1506751878000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1506751878000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"d026c8489f66ab6c12ad04bd37f1d5b6f2f3f0d1","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1506751878000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1506751878000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1506751878000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"2915df7152ea095a6290ef69157fd67669e0e793","modified":1506751878000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"86b6fd7f1b1be3ae98f8af6b23a6b1299c670ce9","modified":1506751878000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1506751878000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1506751878000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1506751878000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"bc8c388553bbcf95897459a466ba35bffd5ec5f0","modified":1506751878000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1506751878000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1506751878000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1506751878000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1506751878000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1506751878000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1506751878000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1506751878000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1506751878000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1506751878000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1506751878000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1506751878000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1506751878000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1506751878000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1506751878000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1506751878000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1506751878000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1506751878000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1506751878000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1506751878000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1506751878000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1506751878000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1506751878000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1506751878000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1506751878000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1506751878000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1506751878000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1506751878000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1506751878000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1506751878000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1506751878000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1506751878000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1506751878000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1506751878000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1506751878000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1506751878000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1506751878000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1506751878000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1506751878000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1506751878000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1506751878000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1506751878000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1506751878000},{"_id":"themes/next/.git/objects/pack/pack-51acac8cd9eeeae68c0c3cbfd7c5b3a3699730d6.idx","hash":"5b8aa4486865caf1e3d45466a417ed99626d13a3","modified":1506751878000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"5b031e90db47d0ff59d24917db444c0d95fc59a2","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"740d37f428b8f4574a76fc95cc25e50e0565f45e","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"88c7d75646b66b168213190ee4cd874609afd5e3","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ed88c8b51d0517759c777e71a6bfbe2907bcd994","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ee554b1031ef0070a5916477939021800e3c9d27","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"08a500b2984f109b751f3697ca33172d1340591a","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/post/post-wordcount.styl","hash":"4fda5d38c6c8d910e3bf5c74a48a8d4a3f3dc73d","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"65a64d5662637b66e2f039a5f58217afe7a6e800","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"5f6ea57aabfa30a437059bf8352f1ad829dbd4ff","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"51eca243220cf57133a4becae9b78514bcfdc723","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"57d2c8a060f5e4e1a0aef9aae11a0016cf7ac5ba","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"45df0cf4c97b47e05573bcd41028ee50f3fdf432","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"aeff0e6e23725e8baea27c890ccbbf466024f767","modified":1506751878000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1506751878000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1506751878000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1506751878000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1506751878000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1506751878000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1506751878000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1506751878000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1506751878000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1506751878000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1506751878000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1506751878000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1506751878000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1506751878000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1506751878000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1506751878000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1506751878000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1506751878000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1506751878000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1506751878000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1506751878000},{"_id":"themes/next/.git/objects/pack/pack-51acac8cd9eeeae68c0c3cbfd7c5b3a3699730d6.pack","hash":"2fdb87afaa8598d60ba92751796031882a8753e9","modified":1506751878000},{"_id":"public/tags/index.html","hash":"931ab8ac2712f181a35a25121e22082be8e763c9","modified":1518612837897},{"_id":"public/archives/index.html","hash":"8ad5428320d1d42dad803a0cdf35aad9b4623e79","modified":1518612837897},{"_id":"public/archives/2017/index.html","hash":"4ef2701b124ef84c99d8e1d652f6ede04709f487","modified":1518612837898},{"_id":"public/archives/2017/11/index.html","hash":"b9d64a51927f76a39440139fc7975a0cc9d8fda9","modified":1518612837898},{"_id":"public/archives/2017/12/index.html","hash":"73bcdf805123ac128bb654a2c18436d12ce0d43f","modified":1518612837898},{"_id":"public/archives/2018/index.html","hash":"2a0c07d8108add7ecda8d8d8236f4676db62706d","modified":1518612837898},{"_id":"public/archives/2018/01/index.html","hash":"d109014338ecf98ea4353055e8880bbb0e17d2db","modified":1518612837898},{"_id":"public/categories/technology/index.html","hash":"343385b377a9d971c4a102add4fea2bd8b9acd6d","modified":1518612837898},{"_id":"public/categories/database/index.html","hash":"3c76218b20df50355b6f1ae19a17baac119f9951","modified":1518612837899},{"_id":"public/categories/database/technology/index.html","hash":"dafabe4807da2d2ad39a43c9bf8f2c9c334d8a74","modified":1518612837899},{"_id":"public/tags/datebase/index.html","hash":"5aaa2432e915957918be1906c767c5d5ce99fec2","modified":1518612837899},{"_id":"public/tags/javascript/index.html","hash":"777f269e3eb428b208ef9322c8421429a28dcaa8","modified":1518612837899},{"_id":"public/tags/react/index.html","hash":"1578c00545bee8273e4f64ccb6c5d528c693a9d2","modified":1518612837899},{"_id":"public/tags/electron/index.html","hash":"7118788610cb585855d32079e26b9dcd628e902b","modified":1518612837899},{"_id":"public/tags/react-native/index.html","hash":"a89a7a20f35ac8b5257abd6370938bbceb504f95","modified":1518612837899},{"_id":"public/about/index.html","hash":"5b6b761e1f1c5e593f7f895608d735eb3b151816","modified":1518612837899},{"_id":"public/2018/01/30/热更新demo/index.html","hash":"61347e6c7f2f1d9b40ac551fbe7460e370287ccf","modified":1518612837899},{"_id":"public/2018/01/16/node-sqilte3/index.html","hash":"f18f0f98845218b9fcc89fddffd5459aaa800aa8","modified":1518612837899},{"_id":"public/2017/12/20/Flow-JS类型检测工具/index.html","hash":"2600d0f50ac664a0450b563b08f3bb7fa39707ff","modified":1518612837900},{"_id":"public/2017/12/20/类型检测/index.html","hash":"de0e76be14bec47bae8772b621a17671ec4cdcad","modified":1518612837900},{"_id":"public/2017/11/22/React样式实践/index.html","hash":"673bf7f3acbf6ac4b836ec21ebc9366c0953f004","modified":1518612837900},{"_id":"public/2017/11/10/electron打包后表单控件复制粘贴失效解决办法-1/index.html","hash":"4c2f8f5266e925a94d3aa06c2d813ebee1699aaf","modified":1518612837900},{"_id":"public/index.html","hash":"427721e017b2e05f2238656e9695777156422dd0","modified":1518612837901},{"_id":"public/page/2/index.html","hash":"74966bc63cb2da889fd0a6e0d89671ed7702760f","modified":1518612837901},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1518612837921},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1518612837922},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1518612837922},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1518612837922},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1518612837922},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1518612837922},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1518612837922},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1518612837922},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1518612837923},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1518612837923},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1518612837923},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1518612837923},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1518612837923},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1518612837923},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1518612837924},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1518612837925},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1518612837925},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1518612837925},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1518612837925},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1518612837925},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1518612837925},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1518612837925},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1518612837925},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1518612837925},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1518612837925},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1518612837925},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1518612837926},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1518612837926},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1518612839202},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1518612839216},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1518612839230},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1518612839230},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1518612839230},{"_id":"public/js/src/bootstrap.js","hash":"6117f97b4984b8e33f21c726132da64ba678e4ed","modified":1518612839230},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1518612839230},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1518612839231},{"_id":"public/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1518612839231},{"_id":"public/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1518612839231},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1518612839231},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1518612839231},{"_id":"public/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1518612839232},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1518612839232},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1518612839232},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1518612839232},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1518612839232},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1518612839232},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1518612839232},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1518612839232},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1518612839232},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1518612839232},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1518612839232},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1518612839232},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1518612839232},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1518612839232},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1518612839233},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1518612839233},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1518612839233},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1518612839233},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1518612839233},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1518612839233},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1518612839233},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1518612839233},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1518612839233},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1518612839233},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1518612839233},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1518612839234},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1518612839234},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1518612839234},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1518612839234},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1518612839234},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1518612839234},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1518612839234},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1518612839234},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1518612839234},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1518612839234},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1518612839234},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1518612839234},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1518612839234},{"_id":"public/css/main.css","hash":"416562657fbbb4389f40e48a5b4e5ade3555bc03","modified":1518612839234},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1518612839234},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1518612839234},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1518612839234},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1518612839234},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1518612839234},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1518612839234},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1518612839234},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1518612839234},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1518612839234},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1518612839234},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1518612839234},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1518612839235},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1518612839235},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1518612839235},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1518612839235},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1518612839235},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1518612839235},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1518612839235},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1518612839235},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1518612839236},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1518612839236},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1518612839268}],"Category":[{"name":"technology","_id":"cjdn2vf3b00044g2q2l56zzce"},{"name":"database","_id":"cjdn2vf3w000g4g2qm5bu8c1t"},{"name":"technology","parent":"cjdn2vf3w000g4g2qm5bu8c1t","_id":"cjdn2vf3z000l4g2q88m9nrwc"}],"Data":[],"Page":[{"title":"标签","date":"2018-02-07T16:47:15.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-02-08 00:47:15\ntype: \"tags\"\n---\n","updated":"2018-02-08T02:31:56.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjdn2vf3200014g2qh7efp101","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"<!DOCTYPE html>\n\n\n\n\n\n\n<html class=\"theme-next mist use-motion\" lang=\"zh-Hans\">\n  <head>\n    <meta charset=\"UTF-8\"/>\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\"/>\n    <meta name=\"theme-color\" content=\"#222\">\n    <meta http-equiv=\"Cache-Control\" content=\"no-transform\" />\n    <meta http-equiv=\"Cache-Control\" content=\"no-siteapp\" />\n    <link href=\"/lib/fancybox/source/jquery.fancybox.css?v=2.1.5\" rel=\"stylesheet\" type=\"text/css\" />\n    <link href=\"//fonts.googleapis.com/css?family=Lato:300,300italic,400,400italic,700,700italic&subset=latin,latin-ext\" rel=\"stylesheet\" type=\"text/css\">\n    <link href=\"/lib/font-awesome/css/font-awesome.min.css?v=4.6.2\" rel=\"stylesheet\" type=\"text/css\" />\n    <link href=\"/css/main.css?v=5.1.2\" rel=\"stylesheet\" type=\"text/css\" />\n    <meta name=\"keywords\" content=\"electron,\" />\n    <link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"/favicon.ico?v=5.1.2\" />\n    <meta name=\"description\" content=\"mac系统下快捷键问题在Mac系统下，打完包的electron App中，发现Redo、Undo、复制粘贴等快捷键无效。解决此问题需要此在main.js中注册Menu，直接上代码： 123456789101112131415161718192021222324252627282930//step1: 引入electron的Menu模块var Menu = require(&amp;apos;electro\">\n    <meta name=\"keywords\" content=\"electron\">\n    <meta property=\"og:type\" content=\"article\">\n    <meta property=\"og:url\" content=\"https://WillCoco.github.io/2017/11/10/electron打包后表单控件复制粘贴失效解决办法-1/index.html\">\n    <meta property=\"og:site_name\" content=\"稀客\">\n    <meta property=\"og:description\" content=\"mac系统下快捷键问题在Mac系统下，打完包的electron App中，发现Redo、Undo、复制粘贴等快捷键无效。解决此问题需要此在main.js中注册Menu，直接上代码： 123456789101112131415161718192021222324252627282930//step1: 引入electron的Menu模块var Menu = require(&amp;apos;electro\">\n    <meta property=\"og:locale\" content=\"zh-Hans\">\n    <meta property=\"og:updated_time\" content=\"2017-11-11T04:08:00.000Z\">\n    <meta name=\"twitter:card\" content=\"summary\">\n    <meta name=\"twitter:title\" content=\"electron打包后表单控件复制粘贴失效解决办法\">\n    <meta name=\"twitter:description\" content=\"mac系统下快捷键问题在Mac系统下，打完包的electron App中，发现Redo、Undo、复制粘贴等快捷键无效。解决此问题需要此在main.js中注册Menu，直接上代码： 123456789101112131415161718192021222324252627282930//step1: 引入electron的Menu模块var Menu = require(&amp;apos;electro\">\n\n    <script type=\"text/javascript\" id=\"hexo.configurations\">\n      var NexT = window.NexT || {};\n      var CONFIG = {\n        root: '/',\n        scheme: 'Mist',\n        sidebar: {\"position\":\"left\",\"display\":\"post\",\"offset\":12,\"offset_float\":12,\"b2t\":false,\"scrollpercent\":false,\"onmobile\":false},\n        fancybox: true,\n        tabs: true,\n        motion: true,\n        duoshuo: {\n          userId: '0',\n          author: '博主'\n        },\n        algolia: {\n          applicationID: '',\n          apiKey: '',\n          indexName: '',\n          hits: {\"per_page\":10},\n          labels: {\"input_placeholder\":\"Search for Posts\",\"hits_empty\":\"We didn't find any results for the search: ${query}\",\"hits_stats\":\"${hits} results found in ${time} ms\"}\n        }\n      };\n    </script>\n\n    <link rel=\"canonical\" href=\"https://WillCoco.github.io/2017/11/10/electron打包后表单控件复制粘贴失效解决办法-1/\"/>\n    <title>稀客</title>\n\n  </head>\n\n  <body itemscope itemtype=\"http://schema.org/WebPage\" lang=\"zh-Hans\">\n  <div class=\"container sidebar-position-left page-post-detail \">\n    <div class=\"headband\"></div>\n\n    <header id=\"header\" class=\"header\" itemscope itemtype=\"http://schema.org/WPHeader\">\n      <div class=\"header-inner\">\n        <div class=\"site-brand-wrapper\">\n\n          <div class=\"site-meta \">\n            <div class=\"custom-logo-site-title\">\n              <a href=\"/\"  class=\"brand\" rel=\"start\">\n                <span class=\"logo-line-before\"><i></i></span>\n                <span class=\"site-title\">稀客</span>\n                <span class=\"logo-line-after\"><i></i></span>\n              </a>\n            </div>\n            <p class=\"site-subtitle\"></p>\n          </div>\n\n          <div class=\"site-nav-toggle\">\n            <button>\n              <span class=\"btn-bar\"></span>\n              <span class=\"btn-bar\"></span>\n              <span class=\"btn-bar\"></span>\n            </button>\n          </div>\n\n        </div>\n\n        <nav class=\"site-nav\">\n          <ul id=\"menu\" class=\"menu\">\n              <li class=\"menu-item menu-item-home\">\n                <a href=\"/\" rel=\"section\"><i class=\"menu-item-icon fa fa-fw fa-home\"></i> <br />首页</a>\n              </li>\n              <li class=\"menu-item menu-item-archives\">\n                <a href=\"/archives/\" rel=\"section\"><i class=\"menu-item-icon fa fa-fw fa-archive\"></i> <br />归档</a>\n              </li>\n              <li class=\"menu-item menu-item-tags\">\n                <a href=\"/tags/\" rel=\"section\"><i class=\"menu-item-icon fa fa-fw fa-tags\"></i> <br />标签</a>\n              </li>\n          </ul>\n        </nav>\n      </div>\n    </header>\n\n    \n\n    <footer id=\"footer\" class=\"footer\">\n      <div class=\"footer-inner\">\n        <div class=\"copyright\" >\n          &copy;\n          <span itemprop=\"copyrightYear\">2018</span>\n          <span class=\"with-love\">\n            <i class=\"fa fa-heart\"></i>\n          </span>\n          <span class=\"author\" itemprop=\"copyrightHolder\">cico</span>\n        </div>\n\n        <div class=\"powered-by\">\n          由 <a class=\"theme-link\" href=\"https://hexo.io\">Hexo</a> 强力驱动\n        </div>\n        <div class=\"theme-info\">\n          主题 -\n          <a class=\"theme-link\" href=\"https://github.com/iissnan/hexo-theme-next\">\n            NexT.Mist\n          </a>\n        </div>\n      </div>\n    </footer>\n      <div class=\"back-to-top\">\n        <i class=\"fa fa-arrow-up\"></i>\n      </div>\n  </div>\n\n  <script type=\"text/javascript\">\n    if (Object.prototype.toString.call(window.Promise) !== '[object Function]') {\n      window.Promise = null;\n    }\n  </script>\n  <script type=\"text/javascript\" src=\"/lib/jquery/index.js?v=2.1.3\"></script>\n  <script type=\"text/javascript\" src=\"/lib/fastclick/lib/fastclick.min.js?v=1.0.6\"></script>\n  <script type=\"text/javascript\" src=\"/lib/jquery_lazyload/jquery.lazyload.js?v=1.9.7\"></script>\n  <script type=\"text/javascript\" src=\"/lib/velocity/velocity.min.js?v=1.2.1\"></script>\n  <script type=\"text/javascript\" src=\"/lib/velocity/velocity.ui.min.js?v=1.2.1\"></script>\n  <script type=\"text/javascript\" src=\"/lib/fancybox/source/jquery.fancybox.pack.js?v=2.1.5\"></script>\n  <script type=\"text/javascript\" src=\"/js/src/utils.js?v=5.1.2\"></script>\n  <script type=\"text/javascript\" src=\"/js/src/motion.js?v=5.1.2\"></script>\n  <script type=\"text/javascript\" src=\"/js/src/scrollspy.js?v=5.1.2\"></script>\n  <script type=\"text/javascript\" src=\"/js/src/post-details.js?v=5.1.2\"></script>\n  <script type=\"text/javascript\" src=\"/js/src/bootstrap.js?v=5.1.2\"></script>\n</body>\n</html>\n","source":"about/index.html","raw":"<!DOCTYPE html>\n\n\n\n\n\n\n<html class=\"theme-next mist use-motion\" lang=\"zh-Hans\">\n  <head>\n    <meta charset=\"UTF-8\"/>\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\"/>\n    <meta name=\"theme-color\" content=\"#222\">\n    <meta http-equiv=\"Cache-Control\" content=\"no-transform\" />\n    <meta http-equiv=\"Cache-Control\" content=\"no-siteapp\" />\n    <link href=\"/lib/fancybox/source/jquery.fancybox.css?v=2.1.5\" rel=\"stylesheet\" type=\"text/css\" />\n    <link href=\"//fonts.googleapis.com/css?family=Lato:300,300italic,400,400italic,700,700italic&subset=latin,latin-ext\" rel=\"stylesheet\" type=\"text/css\">\n    <link href=\"/lib/font-awesome/css/font-awesome.min.css?v=4.6.2\" rel=\"stylesheet\" type=\"text/css\" />\n    <link href=\"/css/main.css?v=5.1.2\" rel=\"stylesheet\" type=\"text/css\" />\n    <meta name=\"keywords\" content=\"electron,\" />\n    <link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"/favicon.ico?v=5.1.2\" />\n    <meta name=\"description\" content=\"mac系统下快捷键问题在Mac系统下，打完包的electron App中，发现Redo、Undo、复制粘贴等快捷键无效。解决此问题需要此在main.js中注册Menu，直接上代码： 123456789101112131415161718192021222324252627282930//step1: 引入electron的Menu模块var Menu = require(&amp;apos;electro\">\n    <meta name=\"keywords\" content=\"electron\">\n    <meta property=\"og:type\" content=\"article\">\n    <meta property=\"og:url\" content=\"https://WillCoco.github.io/2017/11/10/electron打包后表单控件复制粘贴失效解决办法-1/index.html\">\n    <meta property=\"og:site_name\" content=\"稀客\">\n    <meta property=\"og:description\" content=\"mac系统下快捷键问题在Mac系统下，打完包的electron App中，发现Redo、Undo、复制粘贴等快捷键无效。解决此问题需要此在main.js中注册Menu，直接上代码： 123456789101112131415161718192021222324252627282930//step1: 引入electron的Menu模块var Menu = require(&amp;apos;electro\">\n    <meta property=\"og:locale\" content=\"zh-Hans\">\n    <meta property=\"og:updated_time\" content=\"2017-11-11T04:08:00.000Z\">\n    <meta name=\"twitter:card\" content=\"summary\">\n    <meta name=\"twitter:title\" content=\"electron打包后表单控件复制粘贴失效解决办法\">\n    <meta name=\"twitter:description\" content=\"mac系统下快捷键问题在Mac系统下，打完包的electron App中，发现Redo、Undo、复制粘贴等快捷键无效。解决此问题需要此在main.js中注册Menu，直接上代码： 123456789101112131415161718192021222324252627282930//step1: 引入electron的Menu模块var Menu = require(&amp;apos;electro\">\n\n    <script type=\"text/javascript\" id=\"hexo.configurations\">\n      var NexT = window.NexT || {};\n      var CONFIG = {\n        root: '/',\n        scheme: 'Mist',\n        sidebar: {\"position\":\"left\",\"display\":\"post\",\"offset\":12,\"offset_float\":12,\"b2t\":false,\"scrollpercent\":false,\"onmobile\":false},\n        fancybox: true,\n        tabs: true,\n        motion: true,\n        duoshuo: {\n          userId: '0',\n          author: '博主'\n        },\n        algolia: {\n          applicationID: '',\n          apiKey: '',\n          indexName: '',\n          hits: {\"per_page\":10},\n          labels: {\"input_placeholder\":\"Search for Posts\",\"hits_empty\":\"We didn't find any results for the search: ${query}\",\"hits_stats\":\"${hits} results found in ${time} ms\"}\n        }\n      };\n    </script>\n\n    <link rel=\"canonical\" href=\"https://WillCoco.github.io/2017/11/10/electron打包后表单控件复制粘贴失效解决办法-1/\"/>\n    <title>稀客</title>\n\n  </head>\n\n  <body itemscope itemtype=\"http://schema.org/WebPage\" lang=\"zh-Hans\">\n  <div class=\"container sidebar-position-left page-post-detail \">\n    <div class=\"headband\"></div>\n\n    <header id=\"header\" class=\"header\" itemscope itemtype=\"http://schema.org/WPHeader\">\n      <div class=\"header-inner\">\n        <div class=\"site-brand-wrapper\">\n\n          <div class=\"site-meta \">\n            <div class=\"custom-logo-site-title\">\n              <a href=\"/\"  class=\"brand\" rel=\"start\">\n                <span class=\"logo-line-before\"><i></i></span>\n                <span class=\"site-title\">稀客</span>\n                <span class=\"logo-line-after\"><i></i></span>\n              </a>\n            </div>\n            <p class=\"site-subtitle\"></p>\n          </div>\n\n          <div class=\"site-nav-toggle\">\n            <button>\n              <span class=\"btn-bar\"></span>\n              <span class=\"btn-bar\"></span>\n              <span class=\"btn-bar\"></span>\n            </button>\n          </div>\n\n        </div>\n\n        <nav class=\"site-nav\">\n          <ul id=\"menu\" class=\"menu\">\n              <li class=\"menu-item menu-item-home\">\n                <a href=\"/\" rel=\"section\"><i class=\"menu-item-icon fa fa-fw fa-home\"></i> <br />首页</a>\n              </li>\n              <li class=\"menu-item menu-item-archives\">\n                <a href=\"/archives/\" rel=\"section\"><i class=\"menu-item-icon fa fa-fw fa-archive\"></i> <br />归档</a>\n              </li>\n              <li class=\"menu-item menu-item-tags\">\n                <a href=\"/tags/\" rel=\"section\"><i class=\"menu-item-icon fa fa-fw fa-tags\"></i> <br />标签</a>\n              </li>\n          </ul>\n        </nav>\n      </div>\n    </header>\n\n    \n\n    <footer id=\"footer\" class=\"footer\">\n      <div class=\"footer-inner\">\n        <div class=\"copyright\" >\n          &copy;\n          <span itemprop=\"copyrightYear\">2018</span>\n          <span class=\"with-love\">\n            <i class=\"fa fa-heart\"></i>\n          </span>\n          <span class=\"author\" itemprop=\"copyrightHolder\">cico</span>\n        </div>\n\n        <div class=\"powered-by\">\n          由 <a class=\"theme-link\" href=\"https://hexo.io\">Hexo</a> 强力驱动\n        </div>\n        <div class=\"theme-info\">\n          主题 -\n          <a class=\"theme-link\" href=\"https://github.com/iissnan/hexo-theme-next\">\n            NexT.Mist\n          </a>\n        </div>\n      </div>\n    </footer>\n      <div class=\"back-to-top\">\n        <i class=\"fa fa-arrow-up\"></i>\n      </div>\n  </div>\n\n  <script type=\"text/javascript\">\n    if (Object.prototype.toString.call(window.Promise) !== '[object Function]') {\n      window.Promise = null;\n    }\n  </script>\n  <script type=\"text/javascript\" src=\"/lib/jquery/index.js?v=2.1.3\"></script>\n  <script type=\"text/javascript\" src=\"/lib/fastclick/lib/fastclick.min.js?v=1.0.6\"></script>\n  <script type=\"text/javascript\" src=\"/lib/jquery_lazyload/jquery.lazyload.js?v=1.9.7\"></script>\n  <script type=\"text/javascript\" src=\"/lib/velocity/velocity.min.js?v=1.2.1\"></script>\n  <script type=\"text/javascript\" src=\"/lib/velocity/velocity.ui.min.js?v=1.2.1\"></script>\n  <script type=\"text/javascript\" src=\"/lib/fancybox/source/jquery.fancybox.pack.js?v=2.1.5\"></script>\n  <script type=\"text/javascript\" src=\"/js/src/utils.js?v=5.1.2\"></script>\n  <script type=\"text/javascript\" src=\"/js/src/motion.js?v=5.1.2\"></script>\n  <script type=\"text/javascript\" src=\"/js/src/scrollspy.js?v=5.1.2\"></script>\n  <script type=\"text/javascript\" src=\"/js/src/post-details.js?v=5.1.2\"></script>\n  <script type=\"text/javascript\" src=\"/js/src/bootstrap.js?v=5.1.2\"></script>\n</body>\n</html>\n","date":"2018-02-14T11:46:59.000Z","updated":"2018-02-14T11:46:59.000Z","path":"about/index.html","title":"","comments":1,"layout":"page","_id":"cjdn2vf3900034g2qympgxrtv","content":"<!DOCTYPE html>\n\n\n\n\n\n\n<html class=\"theme-next mist use-motion\" lang=\"zh-Hans\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\">\n    <meta name=\"theme-color\" content=\"#222\">\n    <meta http-equiv=\"Cache-Control\" content=\"no-transform\">\n    <meta http-equiv=\"Cache-Control\" content=\"no-siteapp\">\n    <link href=\"/lib/fancybox/source/jquery.fancybox.css?v=2.1.5\" rel=\"stylesheet\" type=\"text/css\">\n    <link href=\"//fonts.googleapis.com/css?family=Lato:300,300italic,400,400italic,700,700italic&subset=latin,latin-ext\" rel=\"stylesheet\" type=\"text/css\">\n    <link href=\"/lib/font-awesome/css/font-awesome.min.css?v=4.6.2\" rel=\"stylesheet\" type=\"text/css\">\n    <link href=\"/css/main.css?v=5.1.2\" rel=\"stylesheet\" type=\"text/css\">\n    <meta name=\"keywords\" content=\"electron,\">\n    <link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"/favicon.ico?v=5.1.2\">\n    <meta name=\"description\" content=\"mac系统下快捷键问题在Mac系统下，打完包的electron App中，发现Redo、Undo、复制粘贴等快捷键无效。解决此问题需要此在main.js中注册Menu，直接上代码： 123456789101112131415161718192021222324252627282930//step1: 引入electron的Menu模块var Menu = require(&amp;apos;electro\">\n    <meta name=\"keywords\" content=\"electron\">\n    <meta property=\"og:type\" content=\"article\">\n    <meta property=\"og:url\" content=\"https://WillCoco.github.io/2017/11/10/electron打包后表单控件复制粘贴失效解决办法-1/index.html\">\n    <meta property=\"og:site_name\" content=\"稀客\">\n    <meta property=\"og:description\" content=\"mac系统下快捷键问题在Mac系统下，打完包的electron App中，发现Redo、Undo、复制粘贴等快捷键无效。解决此问题需要此在main.js中注册Menu，直接上代码： 123456789101112131415161718192021222324252627282930//step1: 引入electron的Menu模块var Menu = require(&amp;apos;electro\">\n    <meta property=\"og:locale\" content=\"zh-Hans\">\n    <meta property=\"og:updated_time\" content=\"2017-11-11T04:08:00.000Z\">\n    <meta name=\"twitter:card\" content=\"summary\">\n    <meta name=\"twitter:title\" content=\"electron打包后表单控件复制粘贴失效解决办法\">\n    <meta name=\"twitter:description\" content=\"mac系统下快捷键问题在Mac系统下，打完包的electron App中，发现Redo、Undo、复制粘贴等快捷键无效。解决此问题需要此在main.js中注册Menu，直接上代码： 123456789101112131415161718192021222324252627282930//step1: 引入electron的Menu模块var Menu = require(&amp;apos;electro\">\n\n    <script type=\"text/javascript\" id=\"hexo.configurations\">\n      var NexT = window.NexT || {};\n      var CONFIG = {\n        root: '/',\n        scheme: 'Mist',\n        sidebar: {\"position\":\"left\",\"display\":\"post\",\"offset\":12,\"offset_float\":12,\"b2t\":false,\"scrollpercent\":false,\"onmobile\":false},\n        fancybox: true,\n        tabs: true,\n        motion: true,\n        duoshuo: {\n          userId: '0',\n          author: '博主'\n        },\n        algolia: {\n          applicationID: '',\n          apiKey: '',\n          indexName: '',\n          hits: {\"per_page\":10},\n          labels: {\"input_placeholder\":\"Search for Posts\",\"hits_empty\":\"We didn't find any results for the search: ${query}\",\"hits_stats\":\"${hits} results found in ${time} ms\"}\n        }\n      };\n    </script>\n\n    <link rel=\"canonical\" href=\"https://WillCoco.github.io/2017/11/10/electron打包后表单控件复制粘贴失效解决办法-1/\">\n    <title>稀客</title>\n\n  </head>\n\n  <body itemscope=\"\" itemtype=\"http://schema.org/WebPage\" lang=\"zh-Hans\">\n  <div class=\"container sidebar-position-left page-post-detail \">\n    <div class=\"headband\"></div>\n\n    <header id=\"header\" class=\"header\" itemscope=\"\" itemtype=\"http://schema.org/WPHeader\">\n      <div class=\"header-inner\">\n        <div class=\"site-brand-wrapper\">\n\n          <div class=\"site-meta \">\n            <div class=\"custom-logo-site-title\">\n              <a href=\"/\" class=\"brand\" rel=\"start\">\n                <span class=\"logo-line-before\"><i></i></span>\n                <span class=\"site-title\">稀客</span>\n                <span class=\"logo-line-after\"><i></i></span>\n              </a>\n            </div>\n            <p class=\"site-subtitle\"></p>\n          </div>\n\n          <div class=\"site-nav-toggle\">\n            <button>\n              <span class=\"btn-bar\"></span>\n              <span class=\"btn-bar\"></span>\n              <span class=\"btn-bar\"></span>\n            </button>\n          </div>\n\n        </div>\n\n        <nav class=\"site-nav\">\n          <ul id=\"menu\" class=\"menu\">\n              <li class=\"menu-item menu-item-home\">\n                <a href=\"/\" rel=\"section\"><i class=\"menu-item-icon fa fa-fw fa-home\"></i> <br>首页</a>\n              </li>\n              <li class=\"menu-item menu-item-archives\">\n                <a href=\"/archives/\" rel=\"section\"><i class=\"menu-item-icon fa fa-fw fa-archive\"></i> <br>归档</a>\n              </li>\n              <li class=\"menu-item menu-item-tags\">\n                <a href=\"/tags/\" rel=\"section\"><i class=\"menu-item-icon fa fa-fw fa-tags\"></i> <br>标签</a>\n              </li>\n          </ul>\n        </nav>\n      </div>\n    </header>\n\n    \n\n    <footer id=\"footer\" class=\"footer\">\n      <div class=\"footer-inner\">\n        <div class=\"copyright\">\n          &copy;\n          <span itemprop=\"copyrightYear\">2018</span>\n          <span class=\"with-love\">\n            <i class=\"fa fa-heart\"></i>\n          </span>\n          <span class=\"author\" itemprop=\"copyrightHolder\">cico</span>\n        </div>\n\n        <div class=\"powered-by\">\n          由 <a class=\"theme-link\" href=\"https://hexo.io\" target=\"_blank\" rel=\"external\">Hexo</a> 强力驱动\n        </div>\n        <div class=\"theme-info\">\n          主题 -\n          <a class=\"theme-link\" href=\"https://github.com/iissnan/hexo-theme-next\" target=\"_blank\" rel=\"external\">\n            NexT.Mist\n          </a>\n        </div>\n      </div>\n    </footer>\n      <div class=\"back-to-top\">\n        <i class=\"fa fa-arrow-up\"></i>\n      </div>\n  </div>\n\n  <script type=\"text/javascript\">\n    if (Object.prototype.toString.call(window.Promise) !== '[object Function]') {\n      window.Promise = null;\n    }\n  </script>\n  <script type=\"text/javascript\" src=\"/lib/jquery/index.js?v=2.1.3\"></script>\n  <script type=\"text/javascript\" src=\"/lib/fastclick/lib/fastclick.min.js?v=1.0.6\"></script>\n  <script type=\"text/javascript\" src=\"/lib/jquery_lazyload/jquery.lazyload.js?v=1.9.7\"></script>\n  <script type=\"text/javascript\" src=\"/lib/velocity/velocity.min.js?v=1.2.1\"></script>\n  <script type=\"text/javascript\" src=\"/lib/velocity/velocity.ui.min.js?v=1.2.1\"></script>\n  <script type=\"text/javascript\" src=\"/lib/fancybox/source/jquery.fancybox.pack.js?v=2.1.5\"></script>\n  <script type=\"text/javascript\" src=\"/js/src/utils.js?v=5.1.2\"></script>\n  <script type=\"text/javascript\" src=\"/js/src/motion.js?v=5.1.2\"></script>\n  <script type=\"text/javascript\" src=\"/js/src/scrollspy.js?v=5.1.2\"></script>\n  <script type=\"text/javascript\" src=\"/js/src/post-details.js?v=5.1.2\"></script>\n  <script type=\"text/javascript\" src=\"/js/src/bootstrap.js?v=5.1.2\"></script>\n</body>\n</html>\n","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n\n\n\n\n\n\n<html class=\"theme-next mist use-motion\" lang=\"zh-Hans\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\">\n    <meta name=\"theme-color\" content=\"#222\">\n    <meta http-equiv=\"Cache-Control\" content=\"no-transform\">\n    <meta http-equiv=\"Cache-Control\" content=\"no-siteapp\">\n    <link href=\"/lib/fancybox/source/jquery.fancybox.css?v=2.1.5\" rel=\"stylesheet\" type=\"text/css\">\n    <link href=\"//fonts.googleapis.com/css?family=Lato:300,300italic,400,400italic,700,700italic&subset=latin,latin-ext\" rel=\"stylesheet\" type=\"text/css\">\n    <link href=\"/lib/font-awesome/css/font-awesome.min.css?v=4.6.2\" rel=\"stylesheet\" type=\"text/css\">\n    <link href=\"/css/main.css?v=5.1.2\" rel=\"stylesheet\" type=\"text/css\">\n    <meta name=\"keywords\" content=\"electron,\">\n    <link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"/favicon.ico?v=5.1.2\">\n    <meta name=\"description\" content=\"mac系统下快捷键问题在Mac系统下，打完包的electron App中，发现Redo、Undo、复制粘贴等快捷键无效。解决此问题需要此在main.js中注册Menu，直接上代码： 123456789101112131415161718192021222324252627282930//step1: 引入electron的Menu模块var Menu = require(&amp;apos;electro\">\n    <meta name=\"keywords\" content=\"electron\">\n    <meta property=\"og:type\" content=\"article\">\n    <meta property=\"og:url\" content=\"https://WillCoco.github.io/2017/11/10/electron打包后表单控件复制粘贴失效解决办法-1/index.html\">\n    <meta property=\"og:site_name\" content=\"稀客\">\n    <meta property=\"og:description\" content=\"mac系统下快捷键问题在Mac系统下，打完包的electron App中，发现Redo、Undo、复制粘贴等快捷键无效。解决此问题需要此在main.js中注册Menu，直接上代码： 123456789101112131415161718192021222324252627282930//step1: 引入electron的Menu模块var Menu = require(&amp;apos;electro\">\n    <meta property=\"og:locale\" content=\"zh-Hans\">\n    <meta property=\"og:updated_time\" content=\"2017-11-11T04:08:00.000Z\">\n    <meta name=\"twitter:card\" content=\"summary\">\n    <meta name=\"twitter:title\" content=\"electron打包后表单控件复制粘贴失效解决办法\">\n    <meta name=\"twitter:description\" content=\"mac系统下快捷键问题在Mac系统下，打完包的electron App中，发现Redo、Undo、复制粘贴等快捷键无效。解决此问题需要此在main.js中注册Menu，直接上代码： 123456789101112131415161718192021222324252627282930//step1: 引入electron的Menu模块var Menu = require(&amp;apos;electro\">\n\n    <script type=\"text/javascript\" id=\"hexo.configurations\">\n      var NexT = window.NexT || {};\n      var CONFIG = {\n        root: '/',\n        scheme: 'Mist',\n        sidebar: {\"position\":\"left\",\"display\":\"post\",\"offset\":12,\"offset_float\":12,\"b2t\":false,\"scrollpercent\":false,\"onmobile\":false},\n        fancybox: true,\n        tabs: true,\n        motion: true,\n        duoshuo: {\n          userId: '0',\n          author: '博主'\n        },\n        algolia: {\n          applicationID: '',\n          apiKey: '',\n          indexName: '',\n          hits: {\"per_page\":10},\n          labels: {\"input_placeholder\":\"Search for Posts\",\"hits_empty\":\"We didn't find any results for the search: ${query}\",\"hits_stats\":\"${hits} results found in ${time} ms\"}\n        }\n      };\n    </script>\n\n    <link rel=\"canonical\" href=\"https://WillCoco.github.io/2017/11/10/electron打包后表单控件复制粘贴失效解决办法-1/\">\n    <title>稀客</title>\n\n  </head>\n\n  <body itemscope=\"\" itemtype=\"http://schema.org/WebPage\" lang=\"zh-Hans\">\n  <div class=\"container sidebar-position-left page-post-detail \">\n    <div class=\"headband\"></div>\n\n    <header id=\"header\" class=\"header\" itemscope=\"\" itemtype=\"http://schema.org/WPHeader\">\n      <div class=\"header-inner\">\n        <div class=\"site-brand-wrapper\">\n\n          <div class=\"site-meta \">\n            <div class=\"custom-logo-site-title\">\n              <a href=\"/\" class=\"brand\" rel=\"start\">\n                <span class=\"logo-line-before\"><i></i></span>\n                <span class=\"site-title\">稀客</span>\n                <span class=\"logo-line-after\"><i></i></span>\n              </a>\n            </div>\n            <p class=\"site-subtitle\"></p>\n          </div>\n\n          <div class=\"site-nav-toggle\">\n            <button>\n              <span class=\"btn-bar\"></span>\n              <span class=\"btn-bar\"></span>\n              <span class=\"btn-bar\"></span>\n            </button>\n          </div>\n\n        </div>\n\n        <nav class=\"site-nav\">\n          <ul id=\"menu\" class=\"menu\">\n              <li class=\"menu-item menu-item-home\">\n                <a href=\"/\" rel=\"section\"><i class=\"menu-item-icon fa fa-fw fa-home\"></i> <br>首页</a>\n              </li>\n              <li class=\"menu-item menu-item-archives\">\n                <a href=\"/archives/\" rel=\"section\"><i class=\"menu-item-icon fa fa-fw fa-archive\"></i> <br>归档</a>\n              </li>\n              <li class=\"menu-item menu-item-tags\">\n                <a href=\"/tags/\" rel=\"section\"><i class=\"menu-item-icon fa fa-fw fa-tags\"></i> <br>标签</a>\n              </li>\n          </ul>\n        </nav>\n      </div>\n    </header>\n\n    \n\n    <footer id=\"footer\" class=\"footer\">\n      <div class=\"footer-inner\">\n        <div class=\"copyright\">\n          &copy;\n          <span itemprop=\"copyrightYear\">2018</span>\n          <span class=\"with-love\">\n            <i class=\"fa fa-heart\"></i>\n          </span>\n          <span class=\"author\" itemprop=\"copyrightHolder\">cico</span>\n        </div>\n\n        <div class=\"powered-by\">\n          由 <a class=\"theme-link\" href=\"https://hexo.io\" target=\"_blank\" rel=\"external\">Hexo</a> 强力驱动\n        </div>\n        <div class=\"theme-info\">\n          主题 -\n          <a class=\"theme-link\" href=\"https://github.com/iissnan/hexo-theme-next\" target=\"_blank\" rel=\"external\">\n            NexT.Mist\n          </a>\n        </div>\n      </div>\n    </footer>\n      <div class=\"back-to-top\">\n        <i class=\"fa fa-arrow-up\"></i>\n      </div>\n  </div>\n\n  <script type=\"text/javascript\">\n    if (Object.prototype.toString.call(window.Promise) !== '[object Function]') {\n      window.Promise = null;\n    }\n  </script>\n  <script type=\"text/javascript\" src=\"/lib/jquery/index.js?v=2.1.3\"></script>\n  <script type=\"text/javascript\" src=\"/lib/fastclick/lib/fastclick.min.js?v=1.0.6\"></script>\n  <script type=\"text/javascript\" src=\"/lib/jquery_lazyload/jquery.lazyload.js?v=1.9.7\"></script>\n  <script type=\"text/javascript\" src=\"/lib/velocity/velocity.min.js?v=1.2.1\"></script>\n  <script type=\"text/javascript\" src=\"/lib/velocity/velocity.ui.min.js?v=1.2.1\"></script>\n  <script type=\"text/javascript\" src=\"/lib/fancybox/source/jquery.fancybox.pack.js?v=2.1.5\"></script>\n  <script type=\"text/javascript\" src=\"/js/src/utils.js?v=5.1.2\"></script>\n  <script type=\"text/javascript\" src=\"/js/src/motion.js?v=5.1.2\"></script>\n  <script type=\"text/javascript\" src=\"/js/src/scrollspy.js?v=5.1.2\"></script>\n  <script type=\"text/javascript\" src=\"/js/src/post-details.js?v=5.1.2\"></script>\n  <script type=\"text/javascript\" src=\"/js/src/bootstrap.js?v=5.1.2\"></script>\n</body>\n</html>\n"}],"Post":[{"title":"node-sqilte3 api","comments":1,"_content":"###打开数据库\n//数据库的名字是\"mydatebase.db\"\nvar database;\ndatabase = new sqlite3.Database(\"mydatebase.db\", function(e){\n if (err) throw err;\n});\n//也可以使用内存型，数据不会永久保存\ndatabase = new sqlite3.Database(\":memory:\", function(e){\n if (err) throw err;\n});\n\n###db.run 执行一条语句\nrun方法只执行第一条SQL语句！！！\n// 直接通过参数传值.\ndb.run(\"UPDATE tbl SET name = ? WHERE id = ?\", \"bar\", 2);\n\n// 将值封装为一个数组传值.\ndb.run(\"UPDATE tbl SET name = ? WHERE id = ?\", [ \"bar\", 2 ]);\n\n// 使用一个json传值.参数的前缀可以是“:name”，“@name”和“$name”。推荐用“$name”形式\ndb.run(\"UPDATE tbl SET name = $name WHERE id = $id\", {\n $id: 2,\n $name: \"bar\"\n});\n\n\n###db.exec(sql) 执行多条语句\nDatabase#exec与Database＃run函数一样，都是DDL和DML语句，但是Database#exec可以执行多条语句，并且不支持占位符参数。\n\n\n###db.get 查询一条数据\n\n\n###db.all 查询所有数据\n! 注意，Database#all首先检索所有结果行并将其存储在内存中。 对于数据量可能很大的查询命令时候，请使用Database＃each函数或Database＃prepare代替这个方法\n\n###db.each 遍历数据\n与Database＃run函数相同，都是查询多条数据，但是具有以下区别：\n回调的签名是function（err，row）。如果结果集成功但为空，则不会调用回调。对于每个检索到的行，该方法都会调用一次回调。执行顺序与结果集中的行顺序完全对应。\n调用所有行回调后，如果存在complete回调函数，将调用这个回调。第一个参数是一个错误对象，第二个参数是检索行数。\n\n###流程控制\nsqlite3的API都是异步的，流程控制通过[db.serialize](#db.serialize) 和 [db.parallelize](#db.parallelize)。\n\n###db.serialize\n// 这里执行的命令是并行的\ndb.serialize(function() {\n // 这里执行的命令是串行的\n db.serialize(function() {\n // 这里执行的命令是串行的\n});\n // 这里执行的命令是串行的\n});\n// 这里执行的命令是并行的\n\n###db.parallelize\n// 这里执行的命令是并行的\ndb.serialize(function() {\n // 这里执行的命令是串行的\n db.parallelize(function() {\n // 这里执行的命令是并行的\n});\n // 这里执行的命令是串行的\n});\n// 这里执行的命令是并行的\n\n###db.prepare 预编译SQL\n可以预编译sql语句，执行的时候再链接具体参数。这样的好处是可以减少sql语句被编译的次数。\nDatabase#prepare执行后，会返回一个命令对象，这个命令对象可以反复执行。这个对象的api：\n\n  statement.get\n  statement.run\n  statement.all\n  statement.each\n\n与db同名方法调用方式相同。但在这里是可以复用的，避免重新变异sql语句。\n! 注意，这些方法的param参数都会对Statement对象绑定参数，在下一次执行的时候，如果没有重新绑定参数，是会使用上一次参数的。\n\n###绑定参数 bind\n\nStatement#bind([param, ...], [callback])\n\nDatabase#prepare执行的时候，是可以绑定参数的。不过使用此方法可以全重置语句对象和行游标，并删除所有先前绑定的参数，实现重新绑定的功能。\n\n###重置语句的行游标 reset\n\nStatement.reset([callback])\n\n重置语句的行游标，并保留参数绑定。使用此功能可以使用相同的绑定重新执行相同的查询。\n\n\n###数据库事务\n事务是关系型数据库中的一个重要部分，sqlite自然也是支持事务的，但是sqlite3并没有提供特殊API去实现的事务相关的操作，只能靠SQL语句去控制事务。这里举一个事务相关的例子。\nvar db = new sqlite3.Database(db_path);\ndb.run(\"CREATE TABLE foo (id INT, txt TEXT)\");\ndb.run(\"BEGIN TRANSACTION\");\nvar stmt = db.prepare(\"INSERT INTO foo VALUES(?, ?)\");\nfor (var i = 0; i < count; i++) {\n stmt.run(i, randomString());\n}\ndb.run(\"COMMIT TRANSACTION\");\n","source":"_drafts/node-sqilte3-api.md","raw":"---\ntitle: node-sqilte3 api\ncategories: technology\ntags: datebase\ncomments: true\n---\n###打开数据库\n//数据库的名字是\"mydatebase.db\"\nvar database;\ndatabase = new sqlite3.Database(\"mydatebase.db\", function(e){\n if (err) throw err;\n});\n//也可以使用内存型，数据不会永久保存\ndatabase = new sqlite3.Database(\":memory:\", function(e){\n if (err) throw err;\n});\n\n###db.run 执行一条语句\nrun方法只执行第一条SQL语句！！！\n// 直接通过参数传值.\ndb.run(\"UPDATE tbl SET name = ? WHERE id = ?\", \"bar\", 2);\n\n// 将值封装为一个数组传值.\ndb.run(\"UPDATE tbl SET name = ? WHERE id = ?\", [ \"bar\", 2 ]);\n\n// 使用一个json传值.参数的前缀可以是“:name”，“@name”和“$name”。推荐用“$name”形式\ndb.run(\"UPDATE tbl SET name = $name WHERE id = $id\", {\n $id: 2,\n $name: \"bar\"\n});\n\n\n###db.exec(sql) 执行多条语句\nDatabase#exec与Database＃run函数一样，都是DDL和DML语句，但是Database#exec可以执行多条语句，并且不支持占位符参数。\n\n\n###db.get 查询一条数据\n\n\n###db.all 查询所有数据\n! 注意，Database#all首先检索所有结果行并将其存储在内存中。 对于数据量可能很大的查询命令时候，请使用Database＃each函数或Database＃prepare代替这个方法\n\n###db.each 遍历数据\n与Database＃run函数相同，都是查询多条数据，但是具有以下区别：\n回调的签名是function（err，row）。如果结果集成功但为空，则不会调用回调。对于每个检索到的行，该方法都会调用一次回调。执行顺序与结果集中的行顺序完全对应。\n调用所有行回调后，如果存在complete回调函数，将调用这个回调。第一个参数是一个错误对象，第二个参数是检索行数。\n\n###流程控制\nsqlite3的API都是异步的，流程控制通过[db.serialize](#db.serialize) 和 [db.parallelize](#db.parallelize)。\n\n###db.serialize\n// 这里执行的命令是并行的\ndb.serialize(function() {\n // 这里执行的命令是串行的\n db.serialize(function() {\n // 这里执行的命令是串行的\n});\n // 这里执行的命令是串行的\n});\n// 这里执行的命令是并行的\n\n###db.parallelize\n// 这里执行的命令是并行的\ndb.serialize(function() {\n // 这里执行的命令是串行的\n db.parallelize(function() {\n // 这里执行的命令是并行的\n});\n // 这里执行的命令是串行的\n});\n// 这里执行的命令是并行的\n\n###db.prepare 预编译SQL\n可以预编译sql语句，执行的时候再链接具体参数。这样的好处是可以减少sql语句被编译的次数。\nDatabase#prepare执行后，会返回一个命令对象，这个命令对象可以反复执行。这个对象的api：\n\n  statement.get\n  statement.run\n  statement.all\n  statement.each\n\n与db同名方法调用方式相同。但在这里是可以复用的，避免重新变异sql语句。\n! 注意，这些方法的param参数都会对Statement对象绑定参数，在下一次执行的时候，如果没有重新绑定参数，是会使用上一次参数的。\n\n###绑定参数 bind\n\nStatement#bind([param, ...], [callback])\n\nDatabase#prepare执行的时候，是可以绑定参数的。不过使用此方法可以全重置语句对象和行游标，并删除所有先前绑定的参数，实现重新绑定的功能。\n\n###重置语句的行游标 reset\n\nStatement.reset([callback])\n\n重置语句的行游标，并保留参数绑定。使用此功能可以使用相同的绑定重新执行相同的查询。\n\n\n###数据库事务\n事务是关系型数据库中的一个重要部分，sqlite自然也是支持事务的，但是sqlite3并没有提供特殊API去实现的事务相关的操作，只能靠SQL语句去控制事务。这里举一个事务相关的例子。\nvar db = new sqlite3.Database(db_path);\ndb.run(\"CREATE TABLE foo (id INT, txt TEXT)\");\ndb.run(\"BEGIN TRANSACTION\");\nvar stmt = db.prepare(\"INSERT INTO foo VALUES(?, ?)\");\nfor (var i = 0; i < count; i++) {\n stmt.run(i, randomString());\n}\ndb.run(\"COMMIT TRANSACTION\");\n","slug":"node-sqilte3-api","published":0,"date":"2018-01-18T07:55:20.000Z","updated":"2018-01-18T07:55:20.000Z","layout":"post","photos":[],"link":"","_id":"cjdn2vf2w00004g2qb737flo8","content":"<p>###打开数据库<br>//数据库的名字是”mydatebase.db”<br>var database;<br>database = new sqlite3.Database(“mydatebase.db”, function(e){<br> if (err) throw err;<br>});<br>//也可以使用内存型，数据不会永久保存<br>database = new sqlite3.Database(“:memory:”, function(e){<br> if (err) throw err;<br>});</p>\n<p>###db.run 执行一条语句<br>run方法只执行第一条SQL语句！！！<br>// 直接通过参数传值.<br>db.run(“UPDATE tbl SET name = ? WHERE id = ?”, “bar”, 2);</p>\n<p>// 将值封装为一个数组传值.<br>db.run(“UPDATE tbl SET name = ? WHERE id = ?”, [ “bar”, 2 ]);</p>\n<p>// 使用一个json传值.参数的前缀可以是“:name”，“@name”和“$name”。推荐用“$name”形式<br>db.run(“UPDATE tbl SET name = $name WHERE id = $id”, {<br> $id: 2,<br> $name: “bar”<br>});</p>\n<p>###db.exec(sql) 执行多条语句<br>Database#exec与Database＃run函数一样，都是DDL和DML语句，但是Database#exec可以执行多条语句，并且不支持占位符参数。</p>\n<p>###db.get 查询一条数据</p>\n<p>###db.all 查询所有数据<br>! 注意，Database#all首先检索所有结果行并将其存储在内存中。 对于数据量可能很大的查询命令时候，请使用Database＃each函数或Database＃prepare代替这个方法</p>\n<p>###db.each 遍历数据<br>与Database＃run函数相同，都是查询多条数据，但是具有以下区别：<br>回调的签名是function（err，row）。如果结果集成功但为空，则不会调用回调。对于每个检索到的行，该方法都会调用一次回调。执行顺序与结果集中的行顺序完全对应。<br>调用所有行回调后，如果存在complete回调函数，将调用这个回调。第一个参数是一个错误对象，第二个参数是检索行数。</p>\n<p>###流程控制<br>sqlite3的API都是异步的，流程控制通过<a href=\"#db.serialize\">db.serialize</a> 和 <a href=\"#db.parallelize\">db.parallelize</a>。</p>\n<p>###db.serialize<br>// 这里执行的命令是并行的<br>db.serialize(function() {<br> // 这里执行的命令是串行的<br> db.serialize(function() {<br> // 这里执行的命令是串行的<br>});<br> // 这里执行的命令是串行的<br>});<br>// 这里执行的命令是并行的</p>\n<p>###db.parallelize<br>// 这里执行的命令是并行的<br>db.serialize(function() {<br> // 这里执行的命令是串行的<br> db.parallelize(function() {<br> // 这里执行的命令是并行的<br>});<br> // 这里执行的命令是串行的<br>});<br>// 这里执行的命令是并行的</p>\n<p>###db.prepare 预编译SQL<br>可以预编译sql语句，执行的时候再链接具体参数。这样的好处是可以减少sql语句被编译的次数。<br>Database#prepare执行后，会返回一个命令对象，这个命令对象可以反复执行。这个对象的api：</p>\n<p>  statement.get<br>  statement.run<br>  statement.all<br>  statement.each</p>\n<p>与db同名方法调用方式相同。但在这里是可以复用的，避免重新变异sql语句。<br>! 注意，这些方法的param参数都会对Statement对象绑定参数，在下一次执行的时候，如果没有重新绑定参数，是会使用上一次参数的。</p>\n<p>###绑定参数 bind</p>\n<p>Statement#bind([param, …], [callback])</p>\n<p>Database#prepare执行的时候，是可以绑定参数的。不过使用此方法可以全重置语句对象和行游标，并删除所有先前绑定的参数，实现重新绑定的功能。</p>\n<p>###重置语句的行游标 reset</p>\n<p>Statement.reset([callback])</p>\n<p>重置语句的行游标，并保留参数绑定。使用此功能可以使用相同的绑定重新执行相同的查询。</p>\n<p>###数据库事务<br>事务是关系型数据库中的一个重要部分，sqlite自然也是支持事务的，但是sqlite3并没有提供特殊API去实现的事务相关的操作，只能靠SQL语句去控制事务。这里举一个事务相关的例子。<br>var db = new sqlite3.Database(db_path);<br>db.run(“CREATE TABLE foo (id INT, txt TEXT)”);<br>db.run(“BEGIN TRANSACTION”);<br>var stmt = db.prepare(“INSERT INTO foo VALUES(?, ?)”);<br>for (var i = 0; i &lt; count; i++) {<br> stmt.run(i, randomString());<br>}<br>db.run(“COMMIT TRANSACTION”);</p>\n","site":{"data":{}},"excerpt":"","more":"<p>###打开数据库<br>//数据库的名字是”mydatebase.db”<br>var database;<br>database = new sqlite3.Database(“mydatebase.db”, function(e){<br> if (err) throw err;<br>});<br>//也可以使用内存型，数据不会永久保存<br>database = new sqlite3.Database(“:memory:”, function(e){<br> if (err) throw err;<br>});</p>\n<p>###db.run 执行一条语句<br>run方法只执行第一条SQL语句！！！<br>// 直接通过参数传值.<br>db.run(“UPDATE tbl SET name = ? WHERE id = ?”, “bar”, 2);</p>\n<p>// 将值封装为一个数组传值.<br>db.run(“UPDATE tbl SET name = ? WHERE id = ?”, [ “bar”, 2 ]);</p>\n<p>// 使用一个json传值.参数的前缀可以是“:name”，“@name”和“$name”。推荐用“$name”形式<br>db.run(“UPDATE tbl SET name = $name WHERE id = $id”, {<br> $id: 2,<br> $name: “bar”<br>});</p>\n<p>###db.exec(sql) 执行多条语句<br>Database#exec与Database＃run函数一样，都是DDL和DML语句，但是Database#exec可以执行多条语句，并且不支持占位符参数。</p>\n<p>###db.get 查询一条数据</p>\n<p>###db.all 查询所有数据<br>! 注意，Database#all首先检索所有结果行并将其存储在内存中。 对于数据量可能很大的查询命令时候，请使用Database＃each函数或Database＃prepare代替这个方法</p>\n<p>###db.each 遍历数据<br>与Database＃run函数相同，都是查询多条数据，但是具有以下区别：<br>回调的签名是function（err，row）。如果结果集成功但为空，则不会调用回调。对于每个检索到的行，该方法都会调用一次回调。执行顺序与结果集中的行顺序完全对应。<br>调用所有行回调后，如果存在complete回调函数，将调用这个回调。第一个参数是一个错误对象，第二个参数是检索行数。</p>\n<p>###流程控制<br>sqlite3的API都是异步的，流程控制通过<a href=\"#db.serialize\">db.serialize</a> 和 <a href=\"#db.parallelize\">db.parallelize</a>。</p>\n<p>###db.serialize<br>// 这里执行的命令是并行的<br>db.serialize(function() {<br> // 这里执行的命令是串行的<br> db.serialize(function() {<br> // 这里执行的命令是串行的<br>});<br> // 这里执行的命令是串行的<br>});<br>// 这里执行的命令是并行的</p>\n<p>###db.parallelize<br>// 这里执行的命令是并行的<br>db.serialize(function() {<br> // 这里执行的命令是串行的<br> db.parallelize(function() {<br> // 这里执行的命令是并行的<br>});<br> // 这里执行的命令是串行的<br>});<br>// 这里执行的命令是并行的</p>\n<p>###db.prepare 预编译SQL<br>可以预编译sql语句，执行的时候再链接具体参数。这样的好处是可以减少sql语句被编译的次数。<br>Database#prepare执行后，会返回一个命令对象，这个命令对象可以反复执行。这个对象的api：</p>\n<p>  statement.get<br>  statement.run<br>  statement.all<br>  statement.each</p>\n<p>与db同名方法调用方式相同。但在这里是可以复用的，避免重新变异sql语句。<br>! 注意，这些方法的param参数都会对Statement对象绑定参数，在下一次执行的时候，如果没有重新绑定参数，是会使用上一次参数的。</p>\n<p>###绑定参数 bind</p>\n<p>Statement#bind([param, …], [callback])</p>\n<p>Database#prepare执行的时候，是可以绑定参数的。不过使用此方法可以全重置语句对象和行游标，并删除所有先前绑定的参数，实现重新绑定的功能。</p>\n<p>###重置语句的行游标 reset</p>\n<p>Statement.reset([callback])</p>\n<p>重置语句的行游标，并保留参数绑定。使用此功能可以使用相同的绑定重新执行相同的查询。</p>\n<p>###数据库事务<br>事务是关系型数据库中的一个重要部分，sqlite自然也是支持事务的，但是sqlite3并没有提供特殊API去实现的事务相关的操作，只能靠SQL语句去控制事务。这里举一个事务相关的例子。<br>var db = new sqlite3.Database(db_path);<br>db.run(“CREATE TABLE foo (id INT, txt TEXT)”);<br>db.run(“BEGIN TRANSACTION”);<br>var stmt = db.prepare(“INSERT INTO foo VALUES(?, ?)”);<br>for (var i = 0; i &lt; count; i++) {<br> stmt.run(i, randomString());<br>}<br>db.run(“COMMIT TRANSACTION”);</p>\n"},{"title":"Flow-JS类型检测工具","date":"2017-12-20T15:39:11.000Z","_content":"### 前言\nFacebook超爱Javascript；它快，表达性好，而且到处运行，是构建产品的极佳语言。同时，因为没有静态类型让开发者困扰。Bug难以发现（比如，崩溃的原因隐藏很深），代码维护犹如噩梦（比如，在不知道所有依赖的情况下进行重构风险很大）。Flow改进了速度和效率促进了开发者在使用Javascript的生成效率。\n\nFlow的类型检查是选择性的 —— 你不需要一次性执行检查所有。然而，Flow背后的设计基于假定大多数Javascript的代码类型是隐式静态类型；虽然类型可能不会到处在代码中出现，它们是以一种可以按照代码正确性推理出来的形式存在于开发者的思路中。一旦可能，Flow就去推断这些类型，意味着它可以不需要改动代码就能发现类型错误。另一发面，一些如存在于框架中的Javascript代码，大量使用了反射使得静态类型推断非常困难。对于这种天然动态的代码，类型检查就会错漏百出，因此Flow提供对此类代码添加信任并继续。这种设计在Facebook内部被大量的Javascript代码库所验证：大多数代码没有通过隐式静态类型检查条目，这些条目让开发者可以不用添加注释就能检查代码类型错误。\n\n这使得Flow从根本上区别于其他Javascript的类型系统（如TypeScript），通过弱化的假设大多数JavaScript代码是动态输入的，并由开发者自己表达哪些代码应该是静态类型。通常来看，这类设计会导致检查覆盖率降低：更少的类型错误被检测到，工具不够高效。然而对于某些情况下是合理的，一般这种设计如果没有通过大量额外的努力就无法对实际开发提供足够多的帮助。尽管如此，Flow让你可以简单就获得这种弱化的类型检查，对于现有代码非常有用。\n\n如何对一个文件进行类型检查？\n\n如果你想对一个文件进行类型检查，必须在文件头部加上一行注释；\n\n    // @flow\n      或者\n    /* @flow */\n\n意思简单明了，AT 一下 Flow 检查器，意思是：“嘿， Flow，来验一下我”。\n当我们写完代码后，运行 flow check（或者配置的相应 npm 命令），Flow 会对加上了这行注释的 JS 文件进行类型检查，并且只会对加了这行注释的 JS 文件进行类型检查；这样可以方便的使你渐进式的把你项目中 JS 文件一个个的改写得符合规范。\n\n\n### 自动的类型推导\n\n在我们将一个 JS 文件加入类型检测的范围之后，运行 flow check, Flow 会怎么对这些文件进行操作呢？Flow 有一个自动的类型推导机制，很多情况下，Flow 都自动推导出变量的类型并持续跟踪其使用；比如：\nlet name = 'zhihu';\n将变量 name 定义为 zhihu ，Flow 会自动推导 name 为 string 类型；如果后面的代码对 name 进行了不适用于字符串的操作，运行 Flow 命令对代码进行检测就会报错。比如：\n\n    // @flow\n    let name = ‘zhihu’\n    console.log(name - 1) // 即便没有手动给 name 加上类型标注，Flow 也会在这里报错\n\n### 基本类型的类型标注语法\n\nJavaScript 中的基本类型，类型标注语法是在变量后加上一个冒号，空格，然后是相应的类型名称，如：\n\n    // @flow\n    const a: string = 'zhihu';\n    const b: number = 5;\n    const c: boolean = false;\n    const d: void = undefined;\n    const e: null = null;\n\n以上需要注意的几点：\n1. undefined 的类型是 void；\n2. null 的类型是 null；\n3. string 类型、number 类型和 boolean 类型，其类型名称都是小写开头；但是在 JS 中还有相对应的大写开头的类型名称，如 String，Number, Boolean；\n\n在 Flow 中，大写开头的类型名和小写开头的类型名是有区别的。\n\n    // @flow \n    const a: string = 'a';             // 字面量值对应的类型名称是小写\n    const b: string = String('b');     // String 函数是将参数转化成一个字符串，仍然是小写的 string 类型\n    const c: String = new String(‘c’); // 大写开头的类型名称，其对应的值是 new 创建出来的类型实例；\n\n字面量值作为一种类型\n在 Flow 中，字面量值也可以作为一种类型，符合这种类型的变量只有这个字面量本身；给这个变量赋其他值， Flow 在进行类型检测时都会报错；比如下例所示。\n\n    // @flow\n    let monthsAYear: 12 = 12;\n    monthsAYear = 13; // Flow 会在这里报错\n\n### 函数类型标注\n\n对函数类型我们主要是标注其接受的参数类型和返回值类型；下面的示例中分别展示了如何对函数声明、函数表达式，以及箭头函数加上类型标注。\n\n    // @flow \n    // 函数声明\n    function getLength(str: string): number {\n     return str.length;\n    }\n    // 函数表达式\n    const greeting = function(welcome: string): void{\n     console.log(welcome);\n    }\n    // 箭头函数\n    const addNumber = (a: number, b: number): number => (a + b);\n\n### 数组类型标注\n对数组的标注 Flow 提供两种语法，\n1. Array 后接一对尖括号，且尖括号里边就是数组项的类型名称；\n2. 类型名称后加一对中括号。\n\n    // @flow\n    const names: Array<string> = ['a', 'b', 'c'];\n    const ages: number[] = [1, 2, 3, 4];\n\n### 元组（Tuple）类型的标注    \n\n另外一种常见的数组是元组（Tuple）。在其他语言里，元组可能是一个特定的类型结构；但是在 JS 里，元组就是数组来表示的，并且是一个有限数组，数组每一项的类型分别标注出来；通常的使用场景比如一个用来表示数据库纪录的数组，比如函数返回多个返回值。\n\n    // @flow\n    const recordItem : [number, string, boolean] = [1, 'First', true];\n\n一个数组被标注为元组类型后，每一项的类型都不可再次改变，且数组的长度也不能改变；因此对元组类型的数组进行 push、pop 操作，都是 Flow 不允许的。\n\n### 对象类型的标注\n\n对对象类型加上类型标注的方式是定义其结构（Shape），即有哪些属性，属性及属性值的类型；\n\n    // @flow\n    const borderConfig : {\n     width: number,\n     color: string,\n     hasShadow: boolean\n    } = {\n     width: 10,\n     color: 'red',\n     hasShadow: true,\n    }\n\n上面这种写法非常不直观，类型定义内容跟对象本身混在一起；优化的方式是像下面这样将类型定义和类型标注分开。\n\n    // @flow\n    type BorderConfigType = {\n     width: number,\n     color: string,\n     hasShadow: boolean\n    }\n\n    const borderConfig : BorderConfigType = {\n     width: 10,\n     color: 'red',\n     hasShadow: true,\n    } \n\ntype 是 Flow 中的关键字，用来定义自定义的类型，并且可以在后面的类型标注中使用。例如：\n\n    // @flow\n    type StringType = string;\n    const name: StringType = ‘zhihu’;\n\n    type TupleType = [ number, string ]\n    const record: TupleType = [ 1, ‘a’ ]\n\n更多技术细节请参看：[官方文档](https://flow.org/en/docs/) / [中文翻译](https://zhenyong.github.io/flowtype/docs/builtins.html)\n\n文章来源参考：\nhttps://segmentfault.com/a/1190000004174468\nhttps://zhuanlan.zhihu.com/p/26204569\n","source":"_posts/Flow-JS类型检测工具.md","raw":"---\ntitle: Flow-JS类型检测工具\ndate: 2017-12-20 23:39:11\ntags: [javascript, react]\n---\n### 前言\nFacebook超爱Javascript；它快，表达性好，而且到处运行，是构建产品的极佳语言。同时，因为没有静态类型让开发者困扰。Bug难以发现（比如，崩溃的原因隐藏很深），代码维护犹如噩梦（比如，在不知道所有依赖的情况下进行重构风险很大）。Flow改进了速度和效率促进了开发者在使用Javascript的生成效率。\n\nFlow的类型检查是选择性的 —— 你不需要一次性执行检查所有。然而，Flow背后的设计基于假定大多数Javascript的代码类型是隐式静态类型；虽然类型可能不会到处在代码中出现，它们是以一种可以按照代码正确性推理出来的形式存在于开发者的思路中。一旦可能，Flow就去推断这些类型，意味着它可以不需要改动代码就能发现类型错误。另一发面，一些如存在于框架中的Javascript代码，大量使用了反射使得静态类型推断非常困难。对于这种天然动态的代码，类型检查就会错漏百出，因此Flow提供对此类代码添加信任并继续。这种设计在Facebook内部被大量的Javascript代码库所验证：大多数代码没有通过隐式静态类型检查条目，这些条目让开发者可以不用添加注释就能检查代码类型错误。\n\n这使得Flow从根本上区别于其他Javascript的类型系统（如TypeScript），通过弱化的假设大多数JavaScript代码是动态输入的，并由开发者自己表达哪些代码应该是静态类型。通常来看，这类设计会导致检查覆盖率降低：更少的类型错误被检测到，工具不够高效。然而对于某些情况下是合理的，一般这种设计如果没有通过大量额外的努力就无法对实际开发提供足够多的帮助。尽管如此，Flow让你可以简单就获得这种弱化的类型检查，对于现有代码非常有用。\n\n如何对一个文件进行类型检查？\n\n如果你想对一个文件进行类型检查，必须在文件头部加上一行注释；\n\n    // @flow\n      或者\n    /* @flow */\n\n意思简单明了，AT 一下 Flow 检查器，意思是：“嘿， Flow，来验一下我”。\n当我们写完代码后，运行 flow check（或者配置的相应 npm 命令），Flow 会对加上了这行注释的 JS 文件进行类型检查，并且只会对加了这行注释的 JS 文件进行类型检查；这样可以方便的使你渐进式的把你项目中 JS 文件一个个的改写得符合规范。\n\n\n### 自动的类型推导\n\n在我们将一个 JS 文件加入类型检测的范围之后，运行 flow check, Flow 会怎么对这些文件进行操作呢？Flow 有一个自动的类型推导机制，很多情况下，Flow 都自动推导出变量的类型并持续跟踪其使用；比如：\nlet name = 'zhihu';\n将变量 name 定义为 zhihu ，Flow 会自动推导 name 为 string 类型；如果后面的代码对 name 进行了不适用于字符串的操作，运行 Flow 命令对代码进行检测就会报错。比如：\n\n    // @flow\n    let name = ‘zhihu’\n    console.log(name - 1) // 即便没有手动给 name 加上类型标注，Flow 也会在这里报错\n\n### 基本类型的类型标注语法\n\nJavaScript 中的基本类型，类型标注语法是在变量后加上一个冒号，空格，然后是相应的类型名称，如：\n\n    // @flow\n    const a: string = 'zhihu';\n    const b: number = 5;\n    const c: boolean = false;\n    const d: void = undefined;\n    const e: null = null;\n\n以上需要注意的几点：\n1. undefined 的类型是 void；\n2. null 的类型是 null；\n3. string 类型、number 类型和 boolean 类型，其类型名称都是小写开头；但是在 JS 中还有相对应的大写开头的类型名称，如 String，Number, Boolean；\n\n在 Flow 中，大写开头的类型名和小写开头的类型名是有区别的。\n\n    // @flow \n    const a: string = 'a';             // 字面量值对应的类型名称是小写\n    const b: string = String('b');     // String 函数是将参数转化成一个字符串，仍然是小写的 string 类型\n    const c: String = new String(‘c’); // 大写开头的类型名称，其对应的值是 new 创建出来的类型实例；\n\n字面量值作为一种类型\n在 Flow 中，字面量值也可以作为一种类型，符合这种类型的变量只有这个字面量本身；给这个变量赋其他值， Flow 在进行类型检测时都会报错；比如下例所示。\n\n    // @flow\n    let monthsAYear: 12 = 12;\n    monthsAYear = 13; // Flow 会在这里报错\n\n### 函数类型标注\n\n对函数类型我们主要是标注其接受的参数类型和返回值类型；下面的示例中分别展示了如何对函数声明、函数表达式，以及箭头函数加上类型标注。\n\n    // @flow \n    // 函数声明\n    function getLength(str: string): number {\n     return str.length;\n    }\n    // 函数表达式\n    const greeting = function(welcome: string): void{\n     console.log(welcome);\n    }\n    // 箭头函数\n    const addNumber = (a: number, b: number): number => (a + b);\n\n### 数组类型标注\n对数组的标注 Flow 提供两种语法，\n1. Array 后接一对尖括号，且尖括号里边就是数组项的类型名称；\n2. 类型名称后加一对中括号。\n\n    // @flow\n    const names: Array<string> = ['a', 'b', 'c'];\n    const ages: number[] = [1, 2, 3, 4];\n\n### 元组（Tuple）类型的标注    \n\n另外一种常见的数组是元组（Tuple）。在其他语言里，元组可能是一个特定的类型结构；但是在 JS 里，元组就是数组来表示的，并且是一个有限数组，数组每一项的类型分别标注出来；通常的使用场景比如一个用来表示数据库纪录的数组，比如函数返回多个返回值。\n\n    // @flow\n    const recordItem : [number, string, boolean] = [1, 'First', true];\n\n一个数组被标注为元组类型后，每一项的类型都不可再次改变，且数组的长度也不能改变；因此对元组类型的数组进行 push、pop 操作，都是 Flow 不允许的。\n\n### 对象类型的标注\n\n对对象类型加上类型标注的方式是定义其结构（Shape），即有哪些属性，属性及属性值的类型；\n\n    // @flow\n    const borderConfig : {\n     width: number,\n     color: string,\n     hasShadow: boolean\n    } = {\n     width: 10,\n     color: 'red',\n     hasShadow: true,\n    }\n\n上面这种写法非常不直观，类型定义内容跟对象本身混在一起；优化的方式是像下面这样将类型定义和类型标注分开。\n\n    // @flow\n    type BorderConfigType = {\n     width: number,\n     color: string,\n     hasShadow: boolean\n    }\n\n    const borderConfig : BorderConfigType = {\n     width: 10,\n     color: 'red',\n     hasShadow: true,\n    } \n\ntype 是 Flow 中的关键字，用来定义自定义的类型，并且可以在后面的类型标注中使用。例如：\n\n    // @flow\n    type StringType = string;\n    const name: StringType = ‘zhihu’;\n\n    type TupleType = [ number, string ]\n    const record: TupleType = [ 1, ‘a’ ]\n\n更多技术细节请参看：[官方文档](https://flow.org/en/docs/) / [中文翻译](https://zhenyong.github.io/flowtype/docs/builtins.html)\n\n文章来源参考：\nhttps://segmentfault.com/a/1190000004174468\nhttps://zhuanlan.zhihu.com/p/26204569\n","slug":"Flow-JS类型检测工具","published":1,"updated":"2017-12-21T07:25:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdn2vf3400024g2qg8c1pduz","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>Facebook超爱Javascript；它快，表达性好，而且到处运行，是构建产品的极佳语言。同时，因为没有静态类型让开发者困扰。Bug难以发现（比如，崩溃的原因隐藏很深），代码维护犹如噩梦（比如，在不知道所有依赖的情况下进行重构风险很大）。Flow改进了速度和效率促进了开发者在使用Javascript的生成效率。</p>\n<p>Flow的类型检查是选择性的 —— 你不需要一次性执行检查所有。然而，Flow背后的设计基于假定大多数Javascript的代码类型是隐式静态类型；虽然类型可能不会到处在代码中出现，它们是以一种可以按照代码正确性推理出来的形式存在于开发者的思路中。一旦可能，Flow就去推断这些类型，意味着它可以不需要改动代码就能发现类型错误。另一发面，一些如存在于框架中的Javascript代码，大量使用了反射使得静态类型推断非常困难。对于这种天然动态的代码，类型检查就会错漏百出，因此Flow提供对此类代码添加信任并继续。这种设计在Facebook内部被大量的Javascript代码库所验证：大多数代码没有通过隐式静态类型检查条目，这些条目让开发者可以不用添加注释就能检查代码类型错误。</p>\n<p>这使得Flow从根本上区别于其他Javascript的类型系统（如TypeScript），通过弱化的假设大多数JavaScript代码是动态输入的，并由开发者自己表达哪些代码应该是静态类型。通常来看，这类设计会导致检查覆盖率降低：更少的类型错误被检测到，工具不够高效。然而对于某些情况下是合理的，一般这种设计如果没有通过大量额外的努力就无法对实际开发提供足够多的帮助。尽管如此，Flow让你可以简单就获得这种弱化的类型检查，对于现有代码非常有用。</p>\n<p>如何对一个文件进行类型检查？</p>\n<p>如果你想对一个文件进行类型检查，必须在文件头部加上一行注释；</p>\n<pre><code>// @flow\n  或者\n/* @flow */\n</code></pre><p>意思简单明了，AT 一下 Flow 检查器，意思是：“嘿， Flow，来验一下我”。<br>当我们写完代码后，运行 flow check（或者配置的相应 npm 命令），Flow 会对加上了这行注释的 JS 文件进行类型检查，并且只会对加了这行注释的 JS 文件进行类型检查；这样可以方便的使你渐进式的把你项目中 JS 文件一个个的改写得符合规范。</p>\n<h3 id=\"自动的类型推导\"><a href=\"#自动的类型推导\" class=\"headerlink\" title=\"自动的类型推导\"></a>自动的类型推导</h3><p>在我们将一个 JS 文件加入类型检测的范围之后，运行 flow check, Flow 会怎么对这些文件进行操作呢？Flow 有一个自动的类型推导机制，很多情况下，Flow 都自动推导出变量的类型并持续跟踪其使用；比如：<br>let name = ‘zhihu’;<br>将变量 name 定义为 zhihu ，Flow 会自动推导 name 为 string 类型；如果后面的代码对 name 进行了不适用于字符串的操作，运行 Flow 命令对代码进行检测就会报错。比如：</p>\n<pre><code>// @flow\nlet name = ‘zhihu’\nconsole.log(name - 1) // 即便没有手动给 name 加上类型标注，Flow 也会在这里报错\n</code></pre><h3 id=\"基本类型的类型标注语法\"><a href=\"#基本类型的类型标注语法\" class=\"headerlink\" title=\"基本类型的类型标注语法\"></a>基本类型的类型标注语法</h3><p>JavaScript 中的基本类型，类型标注语法是在变量后加上一个冒号，空格，然后是相应的类型名称，如：</p>\n<pre><code>// @flow\nconst a: string = &apos;zhihu&apos;;\nconst b: number = 5;\nconst c: boolean = false;\nconst d: void = undefined;\nconst e: null = null;\n</code></pre><p>以上需要注意的几点：</p>\n<ol>\n<li>undefined 的类型是 void；</li>\n<li>null 的类型是 null；</li>\n<li>string 类型、number 类型和 boolean 类型，其类型名称都是小写开头；但是在 JS 中还有相对应的大写开头的类型名称，如 String，Number, Boolean；</li>\n</ol>\n<p>在 Flow 中，大写开头的类型名和小写开头的类型名是有区别的。</p>\n<pre><code>// @flow \nconst a: string = &apos;a&apos;;             // 字面量值对应的类型名称是小写\nconst b: string = String(&apos;b&apos;);     // String 函数是将参数转化成一个字符串，仍然是小写的 string 类型\nconst c: String = new String(‘c’); // 大写开头的类型名称，其对应的值是 new 创建出来的类型实例；\n</code></pre><p>字面量值作为一种类型<br>在 Flow 中，字面量值也可以作为一种类型，符合这种类型的变量只有这个字面量本身；给这个变量赋其他值， Flow 在进行类型检测时都会报错；比如下例所示。</p>\n<pre><code>// @flow\nlet monthsAYear: 12 = 12;\nmonthsAYear = 13; // Flow 会在这里报错\n</code></pre><h3 id=\"函数类型标注\"><a href=\"#函数类型标注\" class=\"headerlink\" title=\"函数类型标注\"></a>函数类型标注</h3><p>对函数类型我们主要是标注其接受的参数类型和返回值类型；下面的示例中分别展示了如何对函数声明、函数表达式，以及箭头函数加上类型标注。</p>\n<pre><code>// @flow \n// 函数声明\nfunction getLength(str: string): number {\n return str.length;\n}\n// 函数表达式\nconst greeting = function(welcome: string): void{\n console.log(welcome);\n}\n// 箭头函数\nconst addNumber = (a: number, b: number): number =&gt; (a + b);\n</code></pre><h3 id=\"数组类型标注\"><a href=\"#数组类型标注\" class=\"headerlink\" title=\"数组类型标注\"></a>数组类型标注</h3><p>对数组的标注 Flow 提供两种语法，</p>\n<ol>\n<li>Array 后接一对尖括号，且尖括号里边就是数组项的类型名称；</li>\n<li><p>类型名称后加一对中括号。</p>\n<p> // @flow<br> const names: Array<string> = [‘a’, ‘b’, ‘c’];<br> const ages: number[] = [1, 2, 3, 4];</string></p>\n</li>\n</ol>\n<h3 id=\"元组（Tuple）类型的标注\"><a href=\"#元组（Tuple）类型的标注\" class=\"headerlink\" title=\"元组（Tuple）类型的标注\"></a>元组（Tuple）类型的标注</h3><p>另外一种常见的数组是元组（Tuple）。在其他语言里，元组可能是一个特定的类型结构；但是在 JS 里，元组就是数组来表示的，并且是一个有限数组，数组每一项的类型分别标注出来；通常的使用场景比如一个用来表示数据库纪录的数组，比如函数返回多个返回值。</p>\n<pre><code>// @flow\nconst recordItem : [number, string, boolean] = [1, &apos;First&apos;, true];\n</code></pre><p>一个数组被标注为元组类型后，每一项的类型都不可再次改变，且数组的长度也不能改变；因此对元组类型的数组进行 push、pop 操作，都是 Flow 不允许的。</p>\n<h3 id=\"对象类型的标注\"><a href=\"#对象类型的标注\" class=\"headerlink\" title=\"对象类型的标注\"></a>对象类型的标注</h3><p>对对象类型加上类型标注的方式是定义其结构（Shape），即有哪些属性，属性及属性值的类型；</p>\n<pre><code>// @flow\nconst borderConfig : {\n width: number,\n color: string,\n hasShadow: boolean\n} = {\n width: 10,\n color: &apos;red&apos;,\n hasShadow: true,\n}\n</code></pre><p>上面这种写法非常不直观，类型定义内容跟对象本身混在一起；优化的方式是像下面这样将类型定义和类型标注分开。</p>\n<pre><code>// @flow\ntype BorderConfigType = {\n width: number,\n color: string,\n hasShadow: boolean\n}\n\nconst borderConfig : BorderConfigType = {\n width: 10,\n color: &apos;red&apos;,\n hasShadow: true,\n} \n</code></pre><p>type 是 Flow 中的关键字，用来定义自定义的类型，并且可以在后面的类型标注中使用。例如：</p>\n<pre><code>// @flow\ntype StringType = string;\nconst name: StringType = ‘zhihu’;\n\ntype TupleType = [ number, string ]\nconst record: TupleType = [ 1, ‘a’ ]\n</code></pre><p>更多技术细节请参看：<a href=\"https://flow.org/en/docs/\" target=\"_blank\" rel=\"external\">官方文档</a> / <a href=\"https://zhenyong.github.io/flowtype/docs/builtins.html\" target=\"_blank\" rel=\"external\">中文翻译</a></p>\n<p>文章来源参考：<br><a href=\"https://segmentfault.com/a/1190000004174468\" target=\"_blank\" rel=\"external\">https://segmentfault.com/a/1190000004174468</a><br><a href=\"https://zhuanlan.zhihu.com/p/26204569\" target=\"_blank\" rel=\"external\">https://zhuanlan.zhihu.com/p/26204569</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>Facebook超爱Javascript；它快，表达性好，而且到处运行，是构建产品的极佳语言。同时，因为没有静态类型让开发者困扰。Bug难以发现（比如，崩溃的原因隐藏很深），代码维护犹如噩梦（比如，在不知道所有依赖的情况下进行重构风险很大）。Flow改进了速度和效率促进了开发者在使用Javascript的生成效率。</p>\n<p>Flow的类型检查是选择性的 —— 你不需要一次性执行检查所有。然而，Flow背后的设计基于假定大多数Javascript的代码类型是隐式静态类型；虽然类型可能不会到处在代码中出现，它们是以一种可以按照代码正确性推理出来的形式存在于开发者的思路中。一旦可能，Flow就去推断这些类型，意味着它可以不需要改动代码就能发现类型错误。另一发面，一些如存在于框架中的Javascript代码，大量使用了反射使得静态类型推断非常困难。对于这种天然动态的代码，类型检查就会错漏百出，因此Flow提供对此类代码添加信任并继续。这种设计在Facebook内部被大量的Javascript代码库所验证：大多数代码没有通过隐式静态类型检查条目，这些条目让开发者可以不用添加注释就能检查代码类型错误。</p>\n<p>这使得Flow从根本上区别于其他Javascript的类型系统（如TypeScript），通过弱化的假设大多数JavaScript代码是动态输入的，并由开发者自己表达哪些代码应该是静态类型。通常来看，这类设计会导致检查覆盖率降低：更少的类型错误被检测到，工具不够高效。然而对于某些情况下是合理的，一般这种设计如果没有通过大量额外的努力就无法对实际开发提供足够多的帮助。尽管如此，Flow让你可以简单就获得这种弱化的类型检查，对于现有代码非常有用。</p>\n<p>如何对一个文件进行类型检查？</p>\n<p>如果你想对一个文件进行类型检查，必须在文件头部加上一行注释；</p>\n<pre><code>// @flow\n  或者\n/* @flow */\n</code></pre><p>意思简单明了，AT 一下 Flow 检查器，意思是：“嘿， Flow，来验一下我”。<br>当我们写完代码后，运行 flow check（或者配置的相应 npm 命令），Flow 会对加上了这行注释的 JS 文件进行类型检查，并且只会对加了这行注释的 JS 文件进行类型检查；这样可以方便的使你渐进式的把你项目中 JS 文件一个个的改写得符合规范。</p>\n<h3 id=\"自动的类型推导\"><a href=\"#自动的类型推导\" class=\"headerlink\" title=\"自动的类型推导\"></a>自动的类型推导</h3><p>在我们将一个 JS 文件加入类型检测的范围之后，运行 flow check, Flow 会怎么对这些文件进行操作呢？Flow 有一个自动的类型推导机制，很多情况下，Flow 都自动推导出变量的类型并持续跟踪其使用；比如：<br>let name = ‘zhihu’;<br>将变量 name 定义为 zhihu ，Flow 会自动推导 name 为 string 类型；如果后面的代码对 name 进行了不适用于字符串的操作，运行 Flow 命令对代码进行检测就会报错。比如：</p>\n<pre><code>// @flow\nlet name = ‘zhihu’\nconsole.log(name - 1) // 即便没有手动给 name 加上类型标注，Flow 也会在这里报错\n</code></pre><h3 id=\"基本类型的类型标注语法\"><a href=\"#基本类型的类型标注语法\" class=\"headerlink\" title=\"基本类型的类型标注语法\"></a>基本类型的类型标注语法</h3><p>JavaScript 中的基本类型，类型标注语法是在变量后加上一个冒号，空格，然后是相应的类型名称，如：</p>\n<pre><code>// @flow\nconst a: string = &apos;zhihu&apos;;\nconst b: number = 5;\nconst c: boolean = false;\nconst d: void = undefined;\nconst e: null = null;\n</code></pre><p>以上需要注意的几点：</p>\n<ol>\n<li>undefined 的类型是 void；</li>\n<li>null 的类型是 null；</li>\n<li>string 类型、number 类型和 boolean 类型，其类型名称都是小写开头；但是在 JS 中还有相对应的大写开头的类型名称，如 String，Number, Boolean；</li>\n</ol>\n<p>在 Flow 中，大写开头的类型名和小写开头的类型名是有区别的。</p>\n<pre><code>// @flow \nconst a: string = &apos;a&apos;;             // 字面量值对应的类型名称是小写\nconst b: string = String(&apos;b&apos;);     // String 函数是将参数转化成一个字符串，仍然是小写的 string 类型\nconst c: String = new String(‘c’); // 大写开头的类型名称，其对应的值是 new 创建出来的类型实例；\n</code></pre><p>字面量值作为一种类型<br>在 Flow 中，字面量值也可以作为一种类型，符合这种类型的变量只有这个字面量本身；给这个变量赋其他值， Flow 在进行类型检测时都会报错；比如下例所示。</p>\n<pre><code>// @flow\nlet monthsAYear: 12 = 12;\nmonthsAYear = 13; // Flow 会在这里报错\n</code></pre><h3 id=\"函数类型标注\"><a href=\"#函数类型标注\" class=\"headerlink\" title=\"函数类型标注\"></a>函数类型标注</h3><p>对函数类型我们主要是标注其接受的参数类型和返回值类型；下面的示例中分别展示了如何对函数声明、函数表达式，以及箭头函数加上类型标注。</p>\n<pre><code>// @flow \n// 函数声明\nfunction getLength(str: string): number {\n return str.length;\n}\n// 函数表达式\nconst greeting = function(welcome: string): void{\n console.log(welcome);\n}\n// 箭头函数\nconst addNumber = (a: number, b: number): number =&gt; (a + b);\n</code></pre><h3 id=\"数组类型标注\"><a href=\"#数组类型标注\" class=\"headerlink\" title=\"数组类型标注\"></a>数组类型标注</h3><p>对数组的标注 Flow 提供两种语法，</p>\n<ol>\n<li>Array 后接一对尖括号，且尖括号里边就是数组项的类型名称；</li>\n<li><p>类型名称后加一对中括号。</p>\n<p> // @flow<br> const names: Array<string> = [‘a’, ‘b’, ‘c’];<br> const ages: number[] = [1, 2, 3, 4];</string></p>\n</li>\n</ol>\n<h3 id=\"元组（Tuple）类型的标注\"><a href=\"#元组（Tuple）类型的标注\" class=\"headerlink\" title=\"元组（Tuple）类型的标注\"></a>元组（Tuple）类型的标注</h3><p>另外一种常见的数组是元组（Tuple）。在其他语言里，元组可能是一个特定的类型结构；但是在 JS 里，元组就是数组来表示的，并且是一个有限数组，数组每一项的类型分别标注出来；通常的使用场景比如一个用来表示数据库纪录的数组，比如函数返回多个返回值。</p>\n<pre><code>// @flow\nconst recordItem : [number, string, boolean] = [1, &apos;First&apos;, true];\n</code></pre><p>一个数组被标注为元组类型后，每一项的类型都不可再次改变，且数组的长度也不能改变；因此对元组类型的数组进行 push、pop 操作，都是 Flow 不允许的。</p>\n<h3 id=\"对象类型的标注\"><a href=\"#对象类型的标注\" class=\"headerlink\" title=\"对象类型的标注\"></a>对象类型的标注</h3><p>对对象类型加上类型标注的方式是定义其结构（Shape），即有哪些属性，属性及属性值的类型；</p>\n<pre><code>// @flow\nconst borderConfig : {\n width: number,\n color: string,\n hasShadow: boolean\n} = {\n width: 10,\n color: &apos;red&apos;,\n hasShadow: true,\n}\n</code></pre><p>上面这种写法非常不直观，类型定义内容跟对象本身混在一起；优化的方式是像下面这样将类型定义和类型标注分开。</p>\n<pre><code>// @flow\ntype BorderConfigType = {\n width: number,\n color: string,\n hasShadow: boolean\n}\n\nconst borderConfig : BorderConfigType = {\n width: 10,\n color: &apos;red&apos;,\n hasShadow: true,\n} \n</code></pre><p>type 是 Flow 中的关键字，用来定义自定义的类型，并且可以在后面的类型标注中使用。例如：</p>\n<pre><code>// @flow\ntype StringType = string;\nconst name: StringType = ‘zhihu’;\n\ntype TupleType = [ number, string ]\nconst record: TupleType = [ 1, ‘a’ ]\n</code></pre><p>更多技术细节请参看：<a href=\"https://flow.org/en/docs/\" target=\"_blank\" rel=\"external\">官方文档</a> / <a href=\"https://zhenyong.github.io/flowtype/docs/builtins.html\" target=\"_blank\" rel=\"external\">中文翻译</a></p>\n<p>文章来源参考：<br><a href=\"https://segmentfault.com/a/1190000004174468\" target=\"_blank\" rel=\"external\">https://segmentfault.com/a/1190000004174468</a><br><a href=\"https://zhuanlan.zhihu.com/p/26204569\" target=\"_blank\" rel=\"external\">https://zhuanlan.zhihu.com/p/26204569</a></p>\n"},{"title":"electron打包后表单控件复制粘贴失效解决办法","comments":1,"data":"2017/11/10","_content":"\n## mac系统下快捷键问题\n\n在Mac系统下，打完包的electron App中，发现Redo、Undo、复制粘贴等快捷键无效。解决此问题需要此在main.js中注册Menu，直接上代码：\n\n{% codeblock %}\n   //step1: 引入electron的Menu模块\n   var Menu = require('electron').Menu;\n\n   //step2: 快捷键映射关系\n   let template = [{\n       label: \"Application\",\n       submenu: [\n           { label: \"About Application\", selector: \"orderFrontStandardAboutPanel:\" },\n           { type: \"separator\" },\n           { label: \"Quit\", accelerator: \"Command+Q\", click: function() { app.quit(); }}\n       ]}, {\n       label: \"Edit\",\n       submenu: [\n           { label: \"Undo\", accelerator: \"CmdOrCtrl+Z\", selector: \"undo:\" },\n           { label: \"Redo\", accelerator: \"Shift+CmdOrCtrl+Z\", selector: \"redo:\" },\n           { type: \"separator\" },\n           { label: \"Cut\", accelerator: \"CmdOrCtrl+X\", selector: \"cut:\" },\n           { label: \"Copy\", accelerator: \"CmdOrCtrl+C\", selector: \"copy:\" },\n           { label: \"Paste\", accelerator: \"CmdOrCtrl+V\", selector: \"paste:\" },\n           { label: \"Select All\", accelerator: \"CmdOrCtrl+A\", selector: \"selectAll:\" }\n       ]}\n   ];\n\n   //step3: 在ready后注册\n   app.on('ready', () => {\n     ...\n     //注册菜单\n     Menu.setApplicationMenu(Menu.buildFromTemplate(template));\n   })\n\n{% endcodeblock %}\n\n到此问题就解决了\n","source":"_posts/electron打包后表单控件复制粘贴失效解决办法-1.md","raw":"---\ntitle: electron打包后表单控件复制粘贴失效解决办法\ncategories: technology\ntags: electron\ncomments: true\ndata: 2017/11/10\n---\n\n## mac系统下快捷键问题\n\n在Mac系统下，打完包的electron App中，发现Redo、Undo、复制粘贴等快捷键无效。解决此问题需要此在main.js中注册Menu，直接上代码：\n\n{% codeblock %}\n   //step1: 引入electron的Menu模块\n   var Menu = require('electron').Menu;\n\n   //step2: 快捷键映射关系\n   let template = [{\n       label: \"Application\",\n       submenu: [\n           { label: \"About Application\", selector: \"orderFrontStandardAboutPanel:\" },\n           { type: \"separator\" },\n           { label: \"Quit\", accelerator: \"Command+Q\", click: function() { app.quit(); }}\n       ]}, {\n       label: \"Edit\",\n       submenu: [\n           { label: \"Undo\", accelerator: \"CmdOrCtrl+Z\", selector: \"undo:\" },\n           { label: \"Redo\", accelerator: \"Shift+CmdOrCtrl+Z\", selector: \"redo:\" },\n           { type: \"separator\" },\n           { label: \"Cut\", accelerator: \"CmdOrCtrl+X\", selector: \"cut:\" },\n           { label: \"Copy\", accelerator: \"CmdOrCtrl+C\", selector: \"copy:\" },\n           { label: \"Paste\", accelerator: \"CmdOrCtrl+V\", selector: \"paste:\" },\n           { label: \"Select All\", accelerator: \"CmdOrCtrl+A\", selector: \"selectAll:\" }\n       ]}\n   ];\n\n   //step3: 在ready后注册\n   app.on('ready', () => {\n     ...\n     //注册菜单\n     Menu.setApplicationMenu(Menu.buildFromTemplate(template));\n   })\n\n{% endcodeblock %}\n\n到此问题就解决了\n","slug":"electron打包后表单控件复制粘贴失效解决办法-1","published":1,"date":"2017-11-10T10:30:24.000Z","updated":"2017-11-11T04:08:00.000Z","layout":"post","photos":[],"link":"","_id":"cjdn2vf3d00064g2qpqjprk0q","content":"<h2 id=\"mac系统下快捷键问题\"><a href=\"#mac系统下快捷键问题\" class=\"headerlink\" title=\"mac系统下快捷键问题\"></a>mac系统下快捷键问题</h2><p>在Mac系统下，打完包的electron App中，发现Redo、Undo、复制粘贴等快捷键无效。解决此问题需要此在main.js中注册Menu，直接上代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//step1: 引入electron的Menu模块</span><br><span class=\"line\">var Menu = require(&apos;electron&apos;).Menu;</span><br><span class=\"line\"></span><br><span class=\"line\">//step2: 快捷键映射关系</span><br><span class=\"line\">let template = [&#123;</span><br><span class=\"line\">    label: &quot;Application&quot;,</span><br><span class=\"line\">    submenu: [</span><br><span class=\"line\">        &#123; label: &quot;About Application&quot;, selector: &quot;orderFrontStandardAboutPanel:&quot; &#125;,</span><br><span class=\"line\">        &#123; type: &quot;separator&quot; &#125;,</span><br><span class=\"line\">        &#123; label: &quot;Quit&quot;, accelerator: &quot;Command+Q&quot;, click: function() &#123; app.quit(); &#125;&#125;</span><br><span class=\"line\">    ]&#125;, &#123;</span><br><span class=\"line\">    label: &quot;Edit&quot;,</span><br><span class=\"line\">    submenu: [</span><br><span class=\"line\">        &#123; label: &quot;Undo&quot;, accelerator: &quot;CmdOrCtrl+Z&quot;, selector: &quot;undo:&quot; &#125;,</span><br><span class=\"line\">        &#123; label: &quot;Redo&quot;, accelerator: &quot;Shift+CmdOrCtrl+Z&quot;, selector: &quot;redo:&quot; &#125;,</span><br><span class=\"line\">        &#123; type: &quot;separator&quot; &#125;,</span><br><span class=\"line\">        &#123; label: &quot;Cut&quot;, accelerator: &quot;CmdOrCtrl+X&quot;, selector: &quot;cut:&quot; &#125;,</span><br><span class=\"line\">        &#123; label: &quot;Copy&quot;, accelerator: &quot;CmdOrCtrl+C&quot;, selector: &quot;copy:&quot; &#125;,</span><br><span class=\"line\">        &#123; label: &quot;Paste&quot;, accelerator: &quot;CmdOrCtrl+V&quot;, selector: &quot;paste:&quot; &#125;,</span><br><span class=\"line\">        &#123; label: &quot;Select All&quot;, accelerator: &quot;CmdOrCtrl+A&quot;, selector: &quot;selectAll:&quot; &#125;</span><br><span class=\"line\">    ]&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">//step3: 在ready后注册</span><br><span class=\"line\">app.on(&apos;ready&apos;, () =&gt; &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  //注册菜单</span><br><span class=\"line\">  Menu.setApplicationMenu(Menu.buildFromTemplate(template));</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>到此问题就解决了</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"mac系统下快捷键问题\"><a href=\"#mac系统下快捷键问题\" class=\"headerlink\" title=\"mac系统下快捷键问题\"></a>mac系统下快捷键问题</h2><p>在Mac系统下，打完包的electron App中，发现Redo、Undo、复制粘贴等快捷键无效。解决此问题需要此在main.js中注册Menu，直接上代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//step1: 引入electron的Menu模块</span><br><span class=\"line\">var Menu = require(&apos;electron&apos;).Menu;</span><br><span class=\"line\"></span><br><span class=\"line\">//step2: 快捷键映射关系</span><br><span class=\"line\">let template = [&#123;</span><br><span class=\"line\">    label: &quot;Application&quot;,</span><br><span class=\"line\">    submenu: [</span><br><span class=\"line\">        &#123; label: &quot;About Application&quot;, selector: &quot;orderFrontStandardAboutPanel:&quot; &#125;,</span><br><span class=\"line\">        &#123; type: &quot;separator&quot; &#125;,</span><br><span class=\"line\">        &#123; label: &quot;Quit&quot;, accelerator: &quot;Command+Q&quot;, click: function() &#123; app.quit(); &#125;&#125;</span><br><span class=\"line\">    ]&#125;, &#123;</span><br><span class=\"line\">    label: &quot;Edit&quot;,</span><br><span class=\"line\">    submenu: [</span><br><span class=\"line\">        &#123; label: &quot;Undo&quot;, accelerator: &quot;CmdOrCtrl+Z&quot;, selector: &quot;undo:&quot; &#125;,</span><br><span class=\"line\">        &#123; label: &quot;Redo&quot;, accelerator: &quot;Shift+CmdOrCtrl+Z&quot;, selector: &quot;redo:&quot; &#125;,</span><br><span class=\"line\">        &#123; type: &quot;separator&quot; &#125;,</span><br><span class=\"line\">        &#123; label: &quot;Cut&quot;, accelerator: &quot;CmdOrCtrl+X&quot;, selector: &quot;cut:&quot; &#125;,</span><br><span class=\"line\">        &#123; label: &quot;Copy&quot;, accelerator: &quot;CmdOrCtrl+C&quot;, selector: &quot;copy:&quot; &#125;,</span><br><span class=\"line\">        &#123; label: &quot;Paste&quot;, accelerator: &quot;CmdOrCtrl+V&quot;, selector: &quot;paste:&quot; &#125;,</span><br><span class=\"line\">        &#123; label: &quot;Select All&quot;, accelerator: &quot;CmdOrCtrl+A&quot;, selector: &quot;selectAll:&quot; &#125;</span><br><span class=\"line\">    ]&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">//step3: 在ready后注册</span><br><span class=\"line\">app.on(&apos;ready&apos;, () =&gt; &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  //注册菜单</span><br><span class=\"line\">  Menu.setApplicationMenu(Menu.buildFromTemplate(template));</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>到此问题就解决了</p>\n"},{"title":"React样式实践","comments":1,"date":"2017-11-22T03:26:13.000Z","_content":"\n\n  CSS可以最大限度的分离样式和内容，选择器也可以很方便的给某些元素添加样式。你根本找不到任何不用CSS的理由。但是在React这里就是另外一回事了，虽然React不是不用CSS。但是，它在给元素添加样式的时候方式不同。\n\n  React的核心哲学之一就是让可视化的组件自包含，并且可复用。这就是为什么HTML元素和Javascript放在一起组成了Component（组件）。React的自包含组件需要在定义的时候就定义好样式，这样才能实现自包含。\n\n### react中样式的几种写法\n1.css写法\n\n  xxx.css:\n\n    .container {\n      margin-left: 10px;\n    }\n\n  xxx.js:\n\n    //引入css\n    import style from 'xxx.css'\n\n    //使用className\n    <div className={style.container}>\n      ...\n    </div>\n\n2.行内样式\n\n\n    //jsx中是驼峰命名\n    <div style={{ marginLeft: 10 }}>\n      ...\n    </div>\n\n\n3.对象样式 和 行内样式没什么本质区别\n\n\n    const styles = {\n      marginLeft: 10,\n      ...\n    }\n    <div style={{ marginLeft: 10 }}>\n      ...\n    </div>\n\n\n### 以上看来各种用法都没有问题，但是看下面的例子：\n\n一个封装好的组件：\n\n    <ListItem\n      key={1}\n      innerDivStyle={{ marginLeft: basicMargin }}\n      primaryText= {<PrimaryText data-text=\"总览\" />}\n      leftIcon={<ContentInbox viewBox={Metrics.iconNormal} style={{}} />}\n      hoverColor={activeColor}\n      style={{}}\n    />\n\n\n在ListItem下的style的属性 和 leftIcon中的style属性都可以替换为 className，但是innerDivStyle，它是组件中的内框，又只能用对象样式的方法来书写。\n\n另外，注意到`hoverColor` & `marginLeft`的属性值，我希望他们是统一在项目的Theme资源下定义的，而不是在每个文件里满天飞。如果是对象样式，它可以这样定义js or json文件方便读取：\n\nTheme/Colors.js:\n\n    let colors = {\n      warn: '#ff000',\n      hoverColor: '#ccc'\n    }\n\n    export default colors;\n\nTheme/Metrics.js:\n\n    let metrics = {\n      basicMargin: 10\n    }\n\n    export default metrics;\n\n\nxxx.js中很方便的使用:\n\n    import Color from '../Theme/Color'\n    import Metrics from '../Theme/Metrics'\n    ...\n\n    <ListItem\n      key={1}\n      innerDivStyle={{ marginLeft: Metrics.basicMargin }}\n      primaryText= {<PrimaryText data-text=\"总览\" />}\n      leftIcon={<ContentInbox viewBox={Metrics.iconNormal} style={{}} />}\n      hoverColor={Color.activeColor}\n      style={{}}\n    />\n\n我们再来试试css方式怎么用，sass使得写css像写js一样使用非常灵活，可定义变量等方式来减少重复代码,它在构建阶段被编程普通的css, 需要在webpack中配置loader,我们在这只看它的使用：\n\nTheme/Colors.scss:\n\n    $warn: red;\n    $activeColor: #ccc;\n\n    .warnBackground {\n      background-color: red\n    }\n\n可以被其他scss文件引用, 然而在js中:\n\nxxx.js\n\n    import styles from 'Theme/xxx.scss'\n\n    <ListItem\n      key={1}\n      innerDivStyle={{ ContentInbox: ?? }}\n      primaryText= {<PrimaryText data-text=\"总览\" />}\n      leftIcon={<ContentInbox viewBox={Metrics.iconNormal} className={{}} />}\n      hoverColor={??}\n      className={styles.warnBackground}\n    />\n\n到这就懵逼了，js读取scss定义的属性值 或者 sass从其他js json配置 都不那么容易。 那么组件jsx的属性`hoverColor` & `ContentInbox`怎么传入Theme中的值？\n\n到此总结 在自己造的轮子中， 明确对外开放的属性中，样式定制只通过改变className的， 可以使用css。相信在大部分项目中都会使用其他好用的轮子，包括上面例子中使用的ListItem来自 google的material-ui, 感觉和对象样式或者叫LineStyle更搭配。\n\n各种技术和技术架构总是为产品服务，能满足需求节省开发时间的就是合理的。为了项目整体更整洁，更app，我要把css改成中改成使用对象样式，另外在写动画组件时，还是很愿意尝试css3的动画属性。\n","source":"_posts/React样式实践.md","raw":"---\ntitle: React样式实践\ntags: react\ncategories: technology\ncomments: true\ndate: 2017-11-22 11:26:13\n---\n\n\n  CSS可以最大限度的分离样式和内容，选择器也可以很方便的给某些元素添加样式。你根本找不到任何不用CSS的理由。但是在React这里就是另外一回事了，虽然React不是不用CSS。但是，它在给元素添加样式的时候方式不同。\n\n  React的核心哲学之一就是让可视化的组件自包含，并且可复用。这就是为什么HTML元素和Javascript放在一起组成了Component（组件）。React的自包含组件需要在定义的时候就定义好样式，这样才能实现自包含。\n\n### react中样式的几种写法\n1.css写法\n\n  xxx.css:\n\n    .container {\n      margin-left: 10px;\n    }\n\n  xxx.js:\n\n    //引入css\n    import style from 'xxx.css'\n\n    //使用className\n    <div className={style.container}>\n      ...\n    </div>\n\n2.行内样式\n\n\n    //jsx中是驼峰命名\n    <div style={{ marginLeft: 10 }}>\n      ...\n    </div>\n\n\n3.对象样式 和 行内样式没什么本质区别\n\n\n    const styles = {\n      marginLeft: 10,\n      ...\n    }\n    <div style={{ marginLeft: 10 }}>\n      ...\n    </div>\n\n\n### 以上看来各种用法都没有问题，但是看下面的例子：\n\n一个封装好的组件：\n\n    <ListItem\n      key={1}\n      innerDivStyle={{ marginLeft: basicMargin }}\n      primaryText= {<PrimaryText data-text=\"总览\" />}\n      leftIcon={<ContentInbox viewBox={Metrics.iconNormal} style={{}} />}\n      hoverColor={activeColor}\n      style={{}}\n    />\n\n\n在ListItem下的style的属性 和 leftIcon中的style属性都可以替换为 className，但是innerDivStyle，它是组件中的内框，又只能用对象样式的方法来书写。\n\n另外，注意到`hoverColor` & `marginLeft`的属性值，我希望他们是统一在项目的Theme资源下定义的，而不是在每个文件里满天飞。如果是对象样式，它可以这样定义js or json文件方便读取：\n\nTheme/Colors.js:\n\n    let colors = {\n      warn: '#ff000',\n      hoverColor: '#ccc'\n    }\n\n    export default colors;\n\nTheme/Metrics.js:\n\n    let metrics = {\n      basicMargin: 10\n    }\n\n    export default metrics;\n\n\nxxx.js中很方便的使用:\n\n    import Color from '../Theme/Color'\n    import Metrics from '../Theme/Metrics'\n    ...\n\n    <ListItem\n      key={1}\n      innerDivStyle={{ marginLeft: Metrics.basicMargin }}\n      primaryText= {<PrimaryText data-text=\"总览\" />}\n      leftIcon={<ContentInbox viewBox={Metrics.iconNormal} style={{}} />}\n      hoverColor={Color.activeColor}\n      style={{}}\n    />\n\n我们再来试试css方式怎么用，sass使得写css像写js一样使用非常灵活，可定义变量等方式来减少重复代码,它在构建阶段被编程普通的css, 需要在webpack中配置loader,我们在这只看它的使用：\n\nTheme/Colors.scss:\n\n    $warn: red;\n    $activeColor: #ccc;\n\n    .warnBackground {\n      background-color: red\n    }\n\n可以被其他scss文件引用, 然而在js中:\n\nxxx.js\n\n    import styles from 'Theme/xxx.scss'\n\n    <ListItem\n      key={1}\n      innerDivStyle={{ ContentInbox: ?? }}\n      primaryText= {<PrimaryText data-text=\"总览\" />}\n      leftIcon={<ContentInbox viewBox={Metrics.iconNormal} className={{}} />}\n      hoverColor={??}\n      className={styles.warnBackground}\n    />\n\n到这就懵逼了，js读取scss定义的属性值 或者 sass从其他js json配置 都不那么容易。 那么组件jsx的属性`hoverColor` & `ContentInbox`怎么传入Theme中的值？\n\n到此总结 在自己造的轮子中， 明确对外开放的属性中，样式定制只通过改变className的， 可以使用css。相信在大部分项目中都会使用其他好用的轮子，包括上面例子中使用的ListItem来自 google的material-ui, 感觉和对象样式或者叫LineStyle更搭配。\n\n各种技术和技术架构总是为产品服务，能满足需求节省开发时间的就是合理的。为了项目整体更整洁，更app，我要把css改成中改成使用对象样式，另外在写动画组件时，还是很愿意尝试css3的动画属性。\n","slug":"React样式实践","published":1,"updated":"2017-12-20T15:30:24.000Z","layout":"post","photos":[],"link":"","_id":"cjdn2vf3i00074g2qrku7iiuu","content":"<p>  CSS可以最大限度的分离样式和内容，选择器也可以很方便的给某些元素添加样式。你根本找不到任何不用CSS的理由。但是在React这里就是另外一回事了，虽然React不是不用CSS。但是，它在给元素添加样式的时候方式不同。</p>\n<p>  React的核心哲学之一就是让可视化的组件自包含，并且可复用。这就是为什么HTML元素和Javascript放在一起组成了Component（组件）。React的自包含组件需要在定义的时候就定义好样式，这样才能实现自包含。</p>\n<h3 id=\"react中样式的几种写法\"><a href=\"#react中样式的几种写法\" class=\"headerlink\" title=\"react中样式的几种写法\"></a>react中样式的几种写法</h3><p>1.css写法</p>\n<p>  xxx.css:</p>\n<pre><code>.container {\n  margin-left: 10px;\n}\n</code></pre><p>  xxx.js:</p>\n<pre><code>//引入css\nimport style from &apos;xxx.css&apos;\n\n//使用className\n&lt;div className={style.container}&gt;\n  ...\n&lt;/div&gt;\n</code></pre><p>2.行内样式</p>\n<pre><code>//jsx中是驼峰命名\n&lt;div style={{ marginLeft: 10 }}&gt;\n  ...\n&lt;/div&gt;\n</code></pre><p>3.对象样式 和 行内样式没什么本质区别</p>\n<pre><code>const styles = {\n  marginLeft: 10,\n  ...\n}\n&lt;div style={{ marginLeft: 10 }}&gt;\n  ...\n&lt;/div&gt;\n</code></pre><h3 id=\"以上看来各种用法都没有问题，但是看下面的例子：\"><a href=\"#以上看来各种用法都没有问题，但是看下面的例子：\" class=\"headerlink\" title=\"以上看来各种用法都没有问题，但是看下面的例子：\"></a>以上看来各种用法都没有问题，但是看下面的例子：</h3><p>一个封装好的组件：</p>\n<pre><code>&lt;ListItem\n  key={1}\n  innerDivStyle={{ marginLeft: basicMargin }}\n  primaryText= {&lt;PrimaryText data-text=&quot;总览&quot; /&gt;}\n  leftIcon={&lt;ContentInbox viewBox={Metrics.iconNormal} style={{}} /&gt;}\n  hoverColor={activeColor}\n  style={{}}\n/&gt;\n</code></pre><p>在ListItem下的style的属性 和 leftIcon中的style属性都可以替换为 className，但是innerDivStyle，它是组件中的内框，又只能用对象样式的方法来书写。</p>\n<p>另外，注意到<code>hoverColor</code> &amp; <code>marginLeft</code>的属性值，我希望他们是统一在项目的Theme资源下定义的，而不是在每个文件里满天飞。如果是对象样式，它可以这样定义js or json文件方便读取：</p>\n<p>Theme/Colors.js:</p>\n<pre><code>let colors = {\n  warn: &apos;#ff000&apos;,\n  hoverColor: &apos;#ccc&apos;\n}\n\nexport default colors;\n</code></pre><p>Theme/Metrics.js:</p>\n<pre><code>let metrics = {\n  basicMargin: 10\n}\n\nexport default metrics;\n</code></pre><p>xxx.js中很方便的使用:</p>\n<pre><code>import Color from &apos;../Theme/Color&apos;\nimport Metrics from &apos;../Theme/Metrics&apos;\n...\n\n&lt;ListItem\n  key={1}\n  innerDivStyle={{ marginLeft: Metrics.basicMargin }}\n  primaryText= {&lt;PrimaryText data-text=&quot;总览&quot; /&gt;}\n  leftIcon={&lt;ContentInbox viewBox={Metrics.iconNormal} style={{}} /&gt;}\n  hoverColor={Color.activeColor}\n  style={{}}\n/&gt;\n</code></pre><p>我们再来试试css方式怎么用，sass使得写css像写js一样使用非常灵活，可定义变量等方式来减少重复代码,它在构建阶段被编程普通的css, 需要在webpack中配置loader,我们在这只看它的使用：</p>\n<p>Theme/Colors.scss:</p>\n<pre><code>$warn: red;\n$activeColor: #ccc;\n\n.warnBackground {\n  background-color: red\n}\n</code></pre><p>可以被其他scss文件引用, 然而在js中:</p>\n<p>xxx.js</p>\n<pre><code>import styles from &apos;Theme/xxx.scss&apos;\n\n&lt;ListItem\n  key={1}\n  innerDivStyle={{ ContentInbox: ?? }}\n  primaryText= {&lt;PrimaryText data-text=&quot;总览&quot; /&gt;}\n  leftIcon={&lt;ContentInbox viewBox={Metrics.iconNormal} className={{}} /&gt;}\n  hoverColor={??}\n  className={styles.warnBackground}\n/&gt;\n</code></pre><p>到这就懵逼了，js读取scss定义的属性值 或者 sass从其他js json配置 都不那么容易。 那么组件jsx的属性<code>hoverColor</code> &amp; <code>ContentInbox</code>怎么传入Theme中的值？</p>\n<p>到此总结 在自己造的轮子中， 明确对外开放的属性中，样式定制只通过改变className的， 可以使用css。相信在大部分项目中都会使用其他好用的轮子，包括上面例子中使用的ListItem来自 google的material-ui, 感觉和对象样式或者叫LineStyle更搭配。</p>\n<p>各种技术和技术架构总是为产品服务，能满足需求节省开发时间的就是合理的。为了项目整体更整洁，更app，我要把css改成中改成使用对象样式，另外在写动画组件时，还是很愿意尝试css3的动画属性。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>  CSS可以最大限度的分离样式和内容，选择器也可以很方便的给某些元素添加样式。你根本找不到任何不用CSS的理由。但是在React这里就是另外一回事了，虽然React不是不用CSS。但是，它在给元素添加样式的时候方式不同。</p>\n<p>  React的核心哲学之一就是让可视化的组件自包含，并且可复用。这就是为什么HTML元素和Javascript放在一起组成了Component（组件）。React的自包含组件需要在定义的时候就定义好样式，这样才能实现自包含。</p>\n<h3 id=\"react中样式的几种写法\"><a href=\"#react中样式的几种写法\" class=\"headerlink\" title=\"react中样式的几种写法\"></a>react中样式的几种写法</h3><p>1.css写法</p>\n<p>  xxx.css:</p>\n<pre><code>.container {\n  margin-left: 10px;\n}\n</code></pre><p>  xxx.js:</p>\n<pre><code>//引入css\nimport style from &apos;xxx.css&apos;\n\n//使用className\n&lt;div className={style.container}&gt;\n  ...\n&lt;/div&gt;\n</code></pre><p>2.行内样式</p>\n<pre><code>//jsx中是驼峰命名\n&lt;div style={{ marginLeft: 10 }}&gt;\n  ...\n&lt;/div&gt;\n</code></pre><p>3.对象样式 和 行内样式没什么本质区别</p>\n<pre><code>const styles = {\n  marginLeft: 10,\n  ...\n}\n&lt;div style={{ marginLeft: 10 }}&gt;\n  ...\n&lt;/div&gt;\n</code></pre><h3 id=\"以上看来各种用法都没有问题，但是看下面的例子：\"><a href=\"#以上看来各种用法都没有问题，但是看下面的例子：\" class=\"headerlink\" title=\"以上看来各种用法都没有问题，但是看下面的例子：\"></a>以上看来各种用法都没有问题，但是看下面的例子：</h3><p>一个封装好的组件：</p>\n<pre><code>&lt;ListItem\n  key={1}\n  innerDivStyle={{ marginLeft: basicMargin }}\n  primaryText= {&lt;PrimaryText data-text=&quot;总览&quot; /&gt;}\n  leftIcon={&lt;ContentInbox viewBox={Metrics.iconNormal} style={{}} /&gt;}\n  hoverColor={activeColor}\n  style={{}}\n/&gt;\n</code></pre><p>在ListItem下的style的属性 和 leftIcon中的style属性都可以替换为 className，但是innerDivStyle，它是组件中的内框，又只能用对象样式的方法来书写。</p>\n<p>另外，注意到<code>hoverColor</code> &amp; <code>marginLeft</code>的属性值，我希望他们是统一在项目的Theme资源下定义的，而不是在每个文件里满天飞。如果是对象样式，它可以这样定义js or json文件方便读取：</p>\n<p>Theme/Colors.js:</p>\n<pre><code>let colors = {\n  warn: &apos;#ff000&apos;,\n  hoverColor: &apos;#ccc&apos;\n}\n\nexport default colors;\n</code></pre><p>Theme/Metrics.js:</p>\n<pre><code>let metrics = {\n  basicMargin: 10\n}\n\nexport default metrics;\n</code></pre><p>xxx.js中很方便的使用:</p>\n<pre><code>import Color from &apos;../Theme/Color&apos;\nimport Metrics from &apos;../Theme/Metrics&apos;\n...\n\n&lt;ListItem\n  key={1}\n  innerDivStyle={{ marginLeft: Metrics.basicMargin }}\n  primaryText= {&lt;PrimaryText data-text=&quot;总览&quot; /&gt;}\n  leftIcon={&lt;ContentInbox viewBox={Metrics.iconNormal} style={{}} /&gt;}\n  hoverColor={Color.activeColor}\n  style={{}}\n/&gt;\n</code></pre><p>我们再来试试css方式怎么用，sass使得写css像写js一样使用非常灵活，可定义变量等方式来减少重复代码,它在构建阶段被编程普通的css, 需要在webpack中配置loader,我们在这只看它的使用：</p>\n<p>Theme/Colors.scss:</p>\n<pre><code>$warn: red;\n$activeColor: #ccc;\n\n.warnBackground {\n  background-color: red\n}\n</code></pre><p>可以被其他scss文件引用, 然而在js中:</p>\n<p>xxx.js</p>\n<pre><code>import styles from &apos;Theme/xxx.scss&apos;\n\n&lt;ListItem\n  key={1}\n  innerDivStyle={{ ContentInbox: ?? }}\n  primaryText= {&lt;PrimaryText data-text=&quot;总览&quot; /&gt;}\n  leftIcon={&lt;ContentInbox viewBox={Metrics.iconNormal} className={{}} /&gt;}\n  hoverColor={??}\n  className={styles.warnBackground}\n/&gt;\n</code></pre><p>到这就懵逼了，js读取scss定义的属性值 或者 sass从其他js json配置 都不那么容易。 那么组件jsx的属性<code>hoverColor</code> &amp; <code>ContentInbox</code>怎么传入Theme中的值？</p>\n<p>到此总结 在自己造的轮子中， 明确对外开放的属性中，样式定制只通过改变className的， 可以使用css。相信在大部分项目中都会使用其他好用的轮子，包括上面例子中使用的ListItem来自 google的material-ui, 感觉和对象样式或者叫LineStyle更搭配。</p>\n<p>各种技术和技术架构总是为产品服务，能满足需求节省开发时间的就是合理的。为了项目整体更整洁，更app，我要把css改成中改成使用对象样式，另外在写动画组件时，还是很愿意尝试css3的动画属性。</p>\n"},{"title":"node-sqilte3 api","comments":1,"date":"2018-01-16T11:10:24.000Z","_content":"\n### 打开数据库\n\n      //数据库的名字是\"mydatebase.db\"\n      var database;\n      database = new sqlite3.Database(\"mydatebase.db\", function(e){\n       if (err) throw err;\n      });\n      //也可以使用内存型，数据不会永久保存\n      database = new sqlite3.Database(\":memory:\", function(e){\n       if (err) throw err;\n      });\n\n### db.run 执行一条语句\n\n    run方法只执行第一条SQL语句！！！\n    // 直接通过参数传值.\n    db.run(\"UPDATE tbl SET name = ? WHERE id = ?\", \"bar\", 2);\n\n    // 将值封装为一个数组传值.\n    db.run(\"UPDATE tbl SET name = ? WHERE id = ?\", [ \"bar\", 2 ]);\n\n    // 使用一个json传值.参数的前缀可以是“:name”，“@name”和“$name”。推荐用“$name”形式\n    db.run(\"UPDATE tbl SET name = $name WHERE id = $id\", {\n     $id: 2,\n     $name: \"bar\"\n    });\n\n### db.exec(sql) 执行多条语句\nDatabase#exec与Database＃run函数一样，都是DDL和DML语句，但是Database#exec可以执行多条语句，并且不支持占位符参数。\n\n### db.get 查询一条数据\n\n\n### db.all 查询所有数据\n! 注意，Database#all首先检索所有结果行并将其存储在内存中。 对于数据量可能很大的查询命令时候，请使用Database＃each函数或Database＃prepare代替这个方法\n\n### db.each 遍历数据\n与Database＃run函数相同，都是查询多条数据，但是具有以下区别：\n回调的签名是function（err，row）。如果结果集成功但为空，则不会调用回调。对于每个检索到的行，该方法都会调用一次回调。执行顺序与结果集中的行顺序完全对应。\n调用所有行回调后，如果存在complete回调函数，将调用这个回调。第一个参数是一个错误对象，第二个参数是检索行数。\n\n### 流程控制\nsqlite3的API都是异步的，流程控制通过[db.serialize](#db.serialize) 和 [db.parallelize](#db.parallelize)。\n\n### db.serialize\n\n      // 这里执行的命令是并行的\n      db.serialize(function() {\n       // 这里执行的命令是串行的\n         db.serialize(function() {\n         // 这里执行的命令是串行的\n         });\n       // 这里执行的命令是串行的\n      });\n      // 这里执行的命令是并行的\n\n### db.parallelize\n\n      // 这里执行的命令是并行的\n      db.serialize(function() {\n       // 这里执行的命令是串行的\n         db.parallelize(function() {\n         // 这里执行的命令是并行的\n         });\n       // 这里执行的命令是串行的\n      });\n      // 这里执行的命令是并行的\n\n### db.prepare 预编译SQL\n可以预编译sql语句，执行的时候再链接具体参数。这样的好处是可以减少sql语句被编译的次数。\nDatabase#prepare执行后，会返回一个命令对象，这个命令对象可以反复执行。这个对象的api：\n\n      statement.get\n      statement.run\n      statement.all\n      statement.each\n\n与db同名方法调用方式相同。但在这里是可以复用的，避免重新变异sql语句。\n! 注意，这些方法的param参数都会对Statement对象绑定参数，在下一次执行的时候，如果没有重新绑定参数，是会使用上一次参数的。\n\n### 绑定参数 bind\n\nStatement#bind([param, ...], [callback])\n\nDatabase#prepare执行的时候，是可以绑定参数的。不过使用此方法可以全重置语句对象和行游标，并删除所有先前绑定的参数，实现重新绑定的功能。\n\n### 重置语句的行游标 reset\n\nStatement.reset([callback])\n\n重置语句的行游标，并保留参数绑定。使用此功能可以使用相同的绑定重新执行相同的查询。\n\n\n### 数据库事务\n事务是关系型数据库中的一个重要部分，sqlite自然也是支持事务的，但是sqlite3并没有提供特殊API去实现的事务相关的操作，只能靠SQL语句去控制事务。这里举一个事务相关的例子。\n\n\n      var db = new sqlite3.Database(db_path);\n      db.run(\"CREATE TABLE foo (id INT, txt TEXT)\");\n      db.run(\"BEGIN TRANSACTION\");\n      var stmt = db.prepare(\"INSERT INTO foo VALUES(?, ?)\");\n      for (var i = 0; i < count; i++) {\n         stmt.run(i, randomString());\n      }\n      db.run(\"COMMIT TRANSACTION\");\n","source":"_posts/node-sqilte3.md","raw":"---\ntitle: node-sqilte3 api\ntags: datebase\ncategories: [database, technology]\ncomments: true\ndate: 2018-01-16 19:10:24\n---\n\n### 打开数据库\n\n      //数据库的名字是\"mydatebase.db\"\n      var database;\n      database = new sqlite3.Database(\"mydatebase.db\", function(e){\n       if (err) throw err;\n      });\n      //也可以使用内存型，数据不会永久保存\n      database = new sqlite3.Database(\":memory:\", function(e){\n       if (err) throw err;\n      });\n\n### db.run 执行一条语句\n\n    run方法只执行第一条SQL语句！！！\n    // 直接通过参数传值.\n    db.run(\"UPDATE tbl SET name = ? WHERE id = ?\", \"bar\", 2);\n\n    // 将值封装为一个数组传值.\n    db.run(\"UPDATE tbl SET name = ? WHERE id = ?\", [ \"bar\", 2 ]);\n\n    // 使用一个json传值.参数的前缀可以是“:name”，“@name”和“$name”。推荐用“$name”形式\n    db.run(\"UPDATE tbl SET name = $name WHERE id = $id\", {\n     $id: 2,\n     $name: \"bar\"\n    });\n\n### db.exec(sql) 执行多条语句\nDatabase#exec与Database＃run函数一样，都是DDL和DML语句，但是Database#exec可以执行多条语句，并且不支持占位符参数。\n\n### db.get 查询一条数据\n\n\n### db.all 查询所有数据\n! 注意，Database#all首先检索所有结果行并将其存储在内存中。 对于数据量可能很大的查询命令时候，请使用Database＃each函数或Database＃prepare代替这个方法\n\n### db.each 遍历数据\n与Database＃run函数相同，都是查询多条数据，但是具有以下区别：\n回调的签名是function（err，row）。如果结果集成功但为空，则不会调用回调。对于每个检索到的行，该方法都会调用一次回调。执行顺序与结果集中的行顺序完全对应。\n调用所有行回调后，如果存在complete回调函数，将调用这个回调。第一个参数是一个错误对象，第二个参数是检索行数。\n\n### 流程控制\nsqlite3的API都是异步的，流程控制通过[db.serialize](#db.serialize) 和 [db.parallelize](#db.parallelize)。\n\n### db.serialize\n\n      // 这里执行的命令是并行的\n      db.serialize(function() {\n       // 这里执行的命令是串行的\n         db.serialize(function() {\n         // 这里执行的命令是串行的\n         });\n       // 这里执行的命令是串行的\n      });\n      // 这里执行的命令是并行的\n\n### db.parallelize\n\n      // 这里执行的命令是并行的\n      db.serialize(function() {\n       // 这里执行的命令是串行的\n         db.parallelize(function() {\n         // 这里执行的命令是并行的\n         });\n       // 这里执行的命令是串行的\n      });\n      // 这里执行的命令是并行的\n\n### db.prepare 预编译SQL\n可以预编译sql语句，执行的时候再链接具体参数。这样的好处是可以减少sql语句被编译的次数。\nDatabase#prepare执行后，会返回一个命令对象，这个命令对象可以反复执行。这个对象的api：\n\n      statement.get\n      statement.run\n      statement.all\n      statement.each\n\n与db同名方法调用方式相同。但在这里是可以复用的，避免重新变异sql语句。\n! 注意，这些方法的param参数都会对Statement对象绑定参数，在下一次执行的时候，如果没有重新绑定参数，是会使用上一次参数的。\n\n### 绑定参数 bind\n\nStatement#bind([param, ...], [callback])\n\nDatabase#prepare执行的时候，是可以绑定参数的。不过使用此方法可以全重置语句对象和行游标，并删除所有先前绑定的参数，实现重新绑定的功能。\n\n### 重置语句的行游标 reset\n\nStatement.reset([callback])\n\n重置语句的行游标，并保留参数绑定。使用此功能可以使用相同的绑定重新执行相同的查询。\n\n\n### 数据库事务\n事务是关系型数据库中的一个重要部分，sqlite自然也是支持事务的，但是sqlite3并没有提供特殊API去实现的事务相关的操作，只能靠SQL语句去控制事务。这里举一个事务相关的例子。\n\n\n      var db = new sqlite3.Database(db_path);\n      db.run(\"CREATE TABLE foo (id INT, txt TEXT)\");\n      db.run(\"BEGIN TRANSACTION\");\n      var stmt = db.prepare(\"INSERT INTO foo VALUES(?, ?)\");\n      for (var i = 0; i < count; i++) {\n         stmt.run(i, randomString());\n      }\n      db.run(\"COMMIT TRANSACTION\");\n","slug":"node-sqilte3","published":1,"updated":"2018-02-07T16:45:02.000Z","layout":"post","photos":[],"link":"","_id":"cjdn2vf3k00084g2quvhi4em5","content":"<h3 id=\"打开数据库\"><a href=\"#打开数据库\" class=\"headerlink\" title=\"打开数据库\"></a>打开数据库</h3><pre><code>//数据库的名字是&quot;mydatebase.db&quot;\nvar database;\ndatabase = new sqlite3.Database(&quot;mydatebase.db&quot;, function(e){\n if (err) throw err;\n});\n//也可以使用内存型，数据不会永久保存\ndatabase = new sqlite3.Database(&quot;:memory:&quot;, function(e){\n if (err) throw err;\n});\n</code></pre><h3 id=\"db-run-执行一条语句\"><a href=\"#db-run-执行一条语句\" class=\"headerlink\" title=\"db.run 执行一条语句\"></a>db.run 执行一条语句</h3><pre><code>run方法只执行第一条SQL语句！！！\n// 直接通过参数传值.\ndb.run(&quot;UPDATE tbl SET name = ? WHERE id = ?&quot;, &quot;bar&quot;, 2);\n\n// 将值封装为一个数组传值.\ndb.run(&quot;UPDATE tbl SET name = ? WHERE id = ?&quot;, [ &quot;bar&quot;, 2 ]);\n\n// 使用一个json传值.参数的前缀可以是“:name”，“@name”和“$name”。推荐用“$name”形式\ndb.run(&quot;UPDATE tbl SET name = $name WHERE id = $id&quot;, {\n $id: 2,\n $name: &quot;bar&quot;\n});\n</code></pre><h3 id=\"db-exec-sql-执行多条语句\"><a href=\"#db-exec-sql-执行多条语句\" class=\"headerlink\" title=\"db.exec(sql) 执行多条语句\"></a>db.exec(sql) 执行多条语句</h3><p>Database#exec与Database＃run函数一样，都是DDL和DML语句，但是Database#exec可以执行多条语句，并且不支持占位符参数。</p>\n<h3 id=\"db-get-查询一条数据\"><a href=\"#db-get-查询一条数据\" class=\"headerlink\" title=\"db.get 查询一条数据\"></a>db.get 查询一条数据</h3><h3 id=\"db-all-查询所有数据\"><a href=\"#db-all-查询所有数据\" class=\"headerlink\" title=\"db.all 查询所有数据\"></a>db.all 查询所有数据</h3><p>! 注意，Database#all首先检索所有结果行并将其存储在内存中。 对于数据量可能很大的查询命令时候，请使用Database＃each函数或Database＃prepare代替这个方法</p>\n<h3 id=\"db-each-遍历数据\"><a href=\"#db-each-遍历数据\" class=\"headerlink\" title=\"db.each 遍历数据\"></a>db.each 遍历数据</h3><p>与Database＃run函数相同，都是查询多条数据，但是具有以下区别：<br>回调的签名是function（err，row）。如果结果集成功但为空，则不会调用回调。对于每个检索到的行，该方法都会调用一次回调。执行顺序与结果集中的行顺序完全对应。<br>调用所有行回调后，如果存在complete回调函数，将调用这个回调。第一个参数是一个错误对象，第二个参数是检索行数。</p>\n<h3 id=\"流程控制\"><a href=\"#流程控制\" class=\"headerlink\" title=\"流程控制\"></a>流程控制</h3><p>sqlite3的API都是异步的，流程控制通过<a href=\"#db.serialize\">db.serialize</a> 和 <a href=\"#db.parallelize\">db.parallelize</a>。</p>\n<h3 id=\"db-serialize\"><a href=\"#db-serialize\" class=\"headerlink\" title=\"db.serialize\"></a>db.serialize</h3><pre><code>// 这里执行的命令是并行的\ndb.serialize(function() {\n // 这里执行的命令是串行的\n   db.serialize(function() {\n   // 这里执行的命令是串行的\n   });\n // 这里执行的命令是串行的\n});\n// 这里执行的命令是并行的\n</code></pre><h3 id=\"db-parallelize\"><a href=\"#db-parallelize\" class=\"headerlink\" title=\"db.parallelize\"></a>db.parallelize</h3><pre><code>// 这里执行的命令是并行的\ndb.serialize(function() {\n // 这里执行的命令是串行的\n   db.parallelize(function() {\n   // 这里执行的命令是并行的\n   });\n // 这里执行的命令是串行的\n});\n// 这里执行的命令是并行的\n</code></pre><h3 id=\"db-prepare-预编译SQL\"><a href=\"#db-prepare-预编译SQL\" class=\"headerlink\" title=\"db.prepare 预编译SQL\"></a>db.prepare 预编译SQL</h3><p>可以预编译sql语句，执行的时候再链接具体参数。这样的好处是可以减少sql语句被编译的次数。<br>Database#prepare执行后，会返回一个命令对象，这个命令对象可以反复执行。这个对象的api：</p>\n<pre><code>statement.get\nstatement.run\nstatement.all\nstatement.each\n</code></pre><p>与db同名方法调用方式相同。但在这里是可以复用的，避免重新变异sql语句。<br>! 注意，这些方法的param参数都会对Statement对象绑定参数，在下一次执行的时候，如果没有重新绑定参数，是会使用上一次参数的。</p>\n<h3 id=\"绑定参数-bind\"><a href=\"#绑定参数-bind\" class=\"headerlink\" title=\"绑定参数 bind\"></a>绑定参数 bind</h3><p>Statement#bind([param, …], [callback])</p>\n<p>Database#prepare执行的时候，是可以绑定参数的。不过使用此方法可以全重置语句对象和行游标，并删除所有先前绑定的参数，实现重新绑定的功能。</p>\n<h3 id=\"重置语句的行游标-reset\"><a href=\"#重置语句的行游标-reset\" class=\"headerlink\" title=\"重置语句的行游标 reset\"></a>重置语句的行游标 reset</h3><p>Statement.reset([callback])</p>\n<p>重置语句的行游标，并保留参数绑定。使用此功能可以使用相同的绑定重新执行相同的查询。</p>\n<h3 id=\"数据库事务\"><a href=\"#数据库事务\" class=\"headerlink\" title=\"数据库事务\"></a>数据库事务</h3><p>事务是关系型数据库中的一个重要部分，sqlite自然也是支持事务的，但是sqlite3并没有提供特殊API去实现的事务相关的操作，只能靠SQL语句去控制事务。这里举一个事务相关的例子。</p>\n<pre><code>var db = new sqlite3.Database(db_path);\ndb.run(&quot;CREATE TABLE foo (id INT, txt TEXT)&quot;);\ndb.run(&quot;BEGIN TRANSACTION&quot;);\nvar stmt = db.prepare(&quot;INSERT INTO foo VALUES(?, ?)&quot;);\nfor (var i = 0; i &lt; count; i++) {\n   stmt.run(i, randomString());\n}\ndb.run(&quot;COMMIT TRANSACTION&quot;);\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"打开数据库\"><a href=\"#打开数据库\" class=\"headerlink\" title=\"打开数据库\"></a>打开数据库</h3><pre><code>//数据库的名字是&quot;mydatebase.db&quot;\nvar database;\ndatabase = new sqlite3.Database(&quot;mydatebase.db&quot;, function(e){\n if (err) throw err;\n});\n//也可以使用内存型，数据不会永久保存\ndatabase = new sqlite3.Database(&quot;:memory:&quot;, function(e){\n if (err) throw err;\n});\n</code></pre><h3 id=\"db-run-执行一条语句\"><a href=\"#db-run-执行一条语句\" class=\"headerlink\" title=\"db.run 执行一条语句\"></a>db.run 执行一条语句</h3><pre><code>run方法只执行第一条SQL语句！！！\n// 直接通过参数传值.\ndb.run(&quot;UPDATE tbl SET name = ? WHERE id = ?&quot;, &quot;bar&quot;, 2);\n\n// 将值封装为一个数组传值.\ndb.run(&quot;UPDATE tbl SET name = ? WHERE id = ?&quot;, [ &quot;bar&quot;, 2 ]);\n\n// 使用一个json传值.参数的前缀可以是“:name”，“@name”和“$name”。推荐用“$name”形式\ndb.run(&quot;UPDATE tbl SET name = $name WHERE id = $id&quot;, {\n $id: 2,\n $name: &quot;bar&quot;\n});\n</code></pre><h3 id=\"db-exec-sql-执行多条语句\"><a href=\"#db-exec-sql-执行多条语句\" class=\"headerlink\" title=\"db.exec(sql) 执行多条语句\"></a>db.exec(sql) 执行多条语句</h3><p>Database#exec与Database＃run函数一样，都是DDL和DML语句，但是Database#exec可以执行多条语句，并且不支持占位符参数。</p>\n<h3 id=\"db-get-查询一条数据\"><a href=\"#db-get-查询一条数据\" class=\"headerlink\" title=\"db.get 查询一条数据\"></a>db.get 查询一条数据</h3><h3 id=\"db-all-查询所有数据\"><a href=\"#db-all-查询所有数据\" class=\"headerlink\" title=\"db.all 查询所有数据\"></a>db.all 查询所有数据</h3><p>! 注意，Database#all首先检索所有结果行并将其存储在内存中。 对于数据量可能很大的查询命令时候，请使用Database＃each函数或Database＃prepare代替这个方法</p>\n<h3 id=\"db-each-遍历数据\"><a href=\"#db-each-遍历数据\" class=\"headerlink\" title=\"db.each 遍历数据\"></a>db.each 遍历数据</h3><p>与Database＃run函数相同，都是查询多条数据，但是具有以下区别：<br>回调的签名是function（err，row）。如果结果集成功但为空，则不会调用回调。对于每个检索到的行，该方法都会调用一次回调。执行顺序与结果集中的行顺序完全对应。<br>调用所有行回调后，如果存在complete回调函数，将调用这个回调。第一个参数是一个错误对象，第二个参数是检索行数。</p>\n<h3 id=\"流程控制\"><a href=\"#流程控制\" class=\"headerlink\" title=\"流程控制\"></a>流程控制</h3><p>sqlite3的API都是异步的，流程控制通过<a href=\"#db.serialize\">db.serialize</a> 和 <a href=\"#db.parallelize\">db.parallelize</a>。</p>\n<h3 id=\"db-serialize\"><a href=\"#db-serialize\" class=\"headerlink\" title=\"db.serialize\"></a>db.serialize</h3><pre><code>// 这里执行的命令是并行的\ndb.serialize(function() {\n // 这里执行的命令是串行的\n   db.serialize(function() {\n   // 这里执行的命令是串行的\n   });\n // 这里执行的命令是串行的\n});\n// 这里执行的命令是并行的\n</code></pre><h3 id=\"db-parallelize\"><a href=\"#db-parallelize\" class=\"headerlink\" title=\"db.parallelize\"></a>db.parallelize</h3><pre><code>// 这里执行的命令是并行的\ndb.serialize(function() {\n // 这里执行的命令是串行的\n   db.parallelize(function() {\n   // 这里执行的命令是并行的\n   });\n // 这里执行的命令是串行的\n});\n// 这里执行的命令是并行的\n</code></pre><h3 id=\"db-prepare-预编译SQL\"><a href=\"#db-prepare-预编译SQL\" class=\"headerlink\" title=\"db.prepare 预编译SQL\"></a>db.prepare 预编译SQL</h3><p>可以预编译sql语句，执行的时候再链接具体参数。这样的好处是可以减少sql语句被编译的次数。<br>Database#prepare执行后，会返回一个命令对象，这个命令对象可以反复执行。这个对象的api：</p>\n<pre><code>statement.get\nstatement.run\nstatement.all\nstatement.each\n</code></pre><p>与db同名方法调用方式相同。但在这里是可以复用的，避免重新变异sql语句。<br>! 注意，这些方法的param参数都会对Statement对象绑定参数，在下一次执行的时候，如果没有重新绑定参数，是会使用上一次参数的。</p>\n<h3 id=\"绑定参数-bind\"><a href=\"#绑定参数-bind\" class=\"headerlink\" title=\"绑定参数 bind\"></a>绑定参数 bind</h3><p>Statement#bind([param, …], [callback])</p>\n<p>Database#prepare执行的时候，是可以绑定参数的。不过使用此方法可以全重置语句对象和行游标，并删除所有先前绑定的参数，实现重新绑定的功能。</p>\n<h3 id=\"重置语句的行游标-reset\"><a href=\"#重置语句的行游标-reset\" class=\"headerlink\" title=\"重置语句的行游标 reset\"></a>重置语句的行游标 reset</h3><p>Statement.reset([callback])</p>\n<p>重置语句的行游标，并保留参数绑定。使用此功能可以使用相同的绑定重新执行相同的查询。</p>\n<h3 id=\"数据库事务\"><a href=\"#数据库事务\" class=\"headerlink\" title=\"数据库事务\"></a>数据库事务</h3><p>事务是关系型数据库中的一个重要部分，sqlite自然也是支持事务的，但是sqlite3并没有提供特殊API去实现的事务相关的操作，只能靠SQL语句去控制事务。这里举一个事务相关的例子。</p>\n<pre><code>var db = new sqlite3.Database(db_path);\ndb.run(&quot;CREATE TABLE foo (id INT, txt TEXT)&quot;);\ndb.run(&quot;BEGIN TRANSACTION&quot;);\nvar stmt = db.prepare(&quot;INSERT INTO foo VALUES(?, ?)&quot;);\nfor (var i = 0; i &lt; count; i++) {\n   stmt.run(i, randomString());\n}\ndb.run(&quot;COMMIT TRANSACTION&quot;);\n</code></pre>"},{"title":"React类型检测","date":"2017-12-20T15:21:21.000Z","_content":"\n随着你的应用的变得越来越大，你可以通过typechecking来找到更多的bug。 对于某些应用，您可以使用JavaScript扩展（如Flow{% post_link Flow-JS类型检测工具 %}或TypeScript）对整个应用程序进行类型检查。\n\n即使你不使用这些，React也有一些内置的typechecking能力。 要在组件的props上运行typechecking，可以分配特殊的propTypes属性：\n\n      class Greeting extends React.Component {\n          render() {\n              return (\n                  <h1>Hello {this.props.name}</h1>\n              )\n          };\n      }\n      Greeting.propTypes = {\n          name: React.PropTypes.string.isRequired\n      };\n\n\nReact.PropTypes返回的是一系列验证函数，用于确保接收的数据类似是否是有效的。\n在这个例子中，我们使用React.PropTypes.string.isRequire检测name是否为字符串，并且是必填的。\n当为prop提供无效值时，JavaScript控制台中将显示警告。 出于性能原因，仅在开发模式下检查propTypes。\n\nReact.PropTypes\n下面是一个示例，其中提供了不同的验证函数：\n\n      MyComponent.propTypes = {\n        // 你可以定义一个js原始类型的prop,默认请情况下，这是都是可选的\n        optionalArray: React.PropTypes.array,\n        optionalBool: React.PropTypes.bool,\n        optionalFunc: React.PropTypes.func,\n        optionalNumber: React.PropTypes.number,\n        optionalObject: React.PropTypes.object,\n        optionalString: React.PropTypes.string,\n        optionalSymbol: React.PropTypes.symbol,\n\n        // 任何可以渲染的东西：数字，字符串，元素或数组（或片段）。\n        optionalNode: React.PropTypes.node,\n\n        // React元素\n        optionalElement: React.PropTypes.element,\n\n        // 你也可以声明prop是某个类的实例。 内部使用的是JS的instanceof运算符。\n        optionalMessage: React.PropTypes.instanceOf(Message),\n\n        // 你可以通过将它作为枚举来确保你的prop被限制到特定的值。\n        optionalEnum: React.PropTypes.oneOf(['News', 'Photos']),\n\n        // 可以是许多类型之一的对象\n        optionalUnion: React.PropTypes.oneOfType([\n          React.PropTypes.string,\n          React.PropTypes.number,\n          React.PropTypes.instanceOf(Message)\n        ]),\n\n        // 某种类型的数组\n        optionalArrayOf: React.PropTypes.arrayOf(React.PropTypes.number),\n\n        // 具有某种类型的属性值的对象\n        optionalObjectOf: React.PropTypes.objectOf(React.PropTypes.number),\n\n        // 采取特定样式的对象\n        optionalObjectWithShape: React.PropTypes.shape({\n          color: React.PropTypes.string,\n          fontSize: React.PropTypes.number\n        }),\n\n        // 你可以用`isRequired`来连接到上面的任何一个类型，以确保如果没有提供props的话会显示一个警告。\n        requiredFunc: React.PropTypes.func.isRequired,\n\n        // 任何数据类型\n        requiredAny: React.PropTypes.any.isRequired,\n\n        // 您还可以指定自定义类型检查器。 如果检查失败，它应该返回一个Error对象。 不要`console.warn`或throw，因为这不会在`oneOfType`内工作。\n        customProp: function(props, propName, componentName) {\n          if (!/matchme/.test(props[propName])) {\n            return new Error(\n              'Invalid prop `' + propName + '` supplied to' +\n              ' `' + componentName + '`. Validation failed.'\n            );\n          }\n        },\n\n        // 您还可以为`arrayOf`和`objectOf`提供自定义类型检查器。 如果检查失败，它应该返回一个Error对象。\n        // 检查器将为数组或对象中的每个键调用验证函数。\n        // 检查器有两个参数，第一个参数是数组或对象本身，第二个是当前项的键。\n        customArrayProp: React.PropTypes.arrayOf(function(propValue, key, componentName, location, propFullName) {\n          if (!/matchme/.test(propValue[key])) {\n            return new Error(\n              'Invalid prop `' + propFullName + '` supplied to' +\n              ' `' + componentName + '`. Validation failed.'\n            );\n          }\n        })\n      };\n要求只能是单个子元素\n\n使用React.PropTypes.element，您可以指定只有一个子元素可以作为内容传递的组件。\n\n      class MyComponent extends React.Component {\n          render() {\n              // 只能包含一个子元素，否则会给出警告\n              const children = this.props.children;\n              return (\n                  <div>{children}</div>\n              );\n          }\n      }\n\n      MyComponent.propTypes = {\n          children: React.PropTypes.element.isRequired\n      }\n设置Prop默认值\n\n您可以通过使用defaultProps属性来定义props的默认值：\n\n      class Greeting extends React.Component {\n          render() {\n              return <h1>hello {this.props.name}</h1>;\n          };\n      }\n\n如果name没有传值，则会将name设置为默认的zhangyatao\n\n      Greeting.defaultProps = {\n          name: 'zhangyatao'\n      }\n\n      // 会渲染处<h1>hi zhangyatao</h1>\n      ReactDOM.render(\n          <Greeting />,\n          document.getElementById('root')\n      )\n如果父组件没有设置并传入name，defaultProps将确保this.props.name将有一个默认值。 propTypes类型检查发生在defaultProps解析之后，因此类型检查也将应用于defaultProps。\n","source":"_posts/类型检测.md","raw":"---\ntitle: React类型检测\ndate: 2017-12-20 23:21:21\ntags: [react,javascript]\n---\n\n随着你的应用的变得越来越大，你可以通过typechecking来找到更多的bug。 对于某些应用，您可以使用JavaScript扩展（如Flow{% post_link Flow-JS类型检测工具 %}或TypeScript）对整个应用程序进行类型检查。\n\n即使你不使用这些，React也有一些内置的typechecking能力。 要在组件的props上运行typechecking，可以分配特殊的propTypes属性：\n\n      class Greeting extends React.Component {\n          render() {\n              return (\n                  <h1>Hello {this.props.name}</h1>\n              )\n          };\n      }\n      Greeting.propTypes = {\n          name: React.PropTypes.string.isRequired\n      };\n\n\nReact.PropTypes返回的是一系列验证函数，用于确保接收的数据类似是否是有效的。\n在这个例子中，我们使用React.PropTypes.string.isRequire检测name是否为字符串，并且是必填的。\n当为prop提供无效值时，JavaScript控制台中将显示警告。 出于性能原因，仅在开发模式下检查propTypes。\n\nReact.PropTypes\n下面是一个示例，其中提供了不同的验证函数：\n\n      MyComponent.propTypes = {\n        // 你可以定义一个js原始类型的prop,默认请情况下，这是都是可选的\n        optionalArray: React.PropTypes.array,\n        optionalBool: React.PropTypes.bool,\n        optionalFunc: React.PropTypes.func,\n        optionalNumber: React.PropTypes.number,\n        optionalObject: React.PropTypes.object,\n        optionalString: React.PropTypes.string,\n        optionalSymbol: React.PropTypes.symbol,\n\n        // 任何可以渲染的东西：数字，字符串，元素或数组（或片段）。\n        optionalNode: React.PropTypes.node,\n\n        // React元素\n        optionalElement: React.PropTypes.element,\n\n        // 你也可以声明prop是某个类的实例。 内部使用的是JS的instanceof运算符。\n        optionalMessage: React.PropTypes.instanceOf(Message),\n\n        // 你可以通过将它作为枚举来确保你的prop被限制到特定的值。\n        optionalEnum: React.PropTypes.oneOf(['News', 'Photos']),\n\n        // 可以是许多类型之一的对象\n        optionalUnion: React.PropTypes.oneOfType([\n          React.PropTypes.string,\n          React.PropTypes.number,\n          React.PropTypes.instanceOf(Message)\n        ]),\n\n        // 某种类型的数组\n        optionalArrayOf: React.PropTypes.arrayOf(React.PropTypes.number),\n\n        // 具有某种类型的属性值的对象\n        optionalObjectOf: React.PropTypes.objectOf(React.PropTypes.number),\n\n        // 采取特定样式的对象\n        optionalObjectWithShape: React.PropTypes.shape({\n          color: React.PropTypes.string,\n          fontSize: React.PropTypes.number\n        }),\n\n        // 你可以用`isRequired`来连接到上面的任何一个类型，以确保如果没有提供props的话会显示一个警告。\n        requiredFunc: React.PropTypes.func.isRequired,\n\n        // 任何数据类型\n        requiredAny: React.PropTypes.any.isRequired,\n\n        // 您还可以指定自定义类型检查器。 如果检查失败，它应该返回一个Error对象。 不要`console.warn`或throw，因为这不会在`oneOfType`内工作。\n        customProp: function(props, propName, componentName) {\n          if (!/matchme/.test(props[propName])) {\n            return new Error(\n              'Invalid prop `' + propName + '` supplied to' +\n              ' `' + componentName + '`. Validation failed.'\n            );\n          }\n        },\n\n        // 您还可以为`arrayOf`和`objectOf`提供自定义类型检查器。 如果检查失败，它应该返回一个Error对象。\n        // 检查器将为数组或对象中的每个键调用验证函数。\n        // 检查器有两个参数，第一个参数是数组或对象本身，第二个是当前项的键。\n        customArrayProp: React.PropTypes.arrayOf(function(propValue, key, componentName, location, propFullName) {\n          if (!/matchme/.test(propValue[key])) {\n            return new Error(\n              'Invalid prop `' + propFullName + '` supplied to' +\n              ' `' + componentName + '`. Validation failed.'\n            );\n          }\n        })\n      };\n要求只能是单个子元素\n\n使用React.PropTypes.element，您可以指定只有一个子元素可以作为内容传递的组件。\n\n      class MyComponent extends React.Component {\n          render() {\n              // 只能包含一个子元素，否则会给出警告\n              const children = this.props.children;\n              return (\n                  <div>{children}</div>\n              );\n          }\n      }\n\n      MyComponent.propTypes = {\n          children: React.PropTypes.element.isRequired\n      }\n设置Prop默认值\n\n您可以通过使用defaultProps属性来定义props的默认值：\n\n      class Greeting extends React.Component {\n          render() {\n              return <h1>hello {this.props.name}</h1>;\n          };\n      }\n\n如果name没有传值，则会将name设置为默认的zhangyatao\n\n      Greeting.defaultProps = {\n          name: 'zhangyatao'\n      }\n\n      // 会渲染处<h1>hi zhangyatao</h1>\n      ReactDOM.render(\n          <Greeting />,\n          document.getElementById('root')\n      )\n如果父组件没有设置并传入name，defaultProps将确保this.props.name将有一个默认值。 propTypes类型检查发生在defaultProps解析之后，因此类型检查也将应用于defaultProps。\n","slug":"类型检测","published":1,"updated":"2017-12-20T15:38:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdn2vf3s000c4g2qra7b2jju","content":"<p>随着你的应用的变得越来越大，你可以通过typechecking来找到更多的bug。 对于某些应用，您可以使用JavaScript扩展（如Flow<a href=\"/2017/12/20/Flow-JS类型检测工具/\" title=\"Flow-JS类型检测工具\">Flow-JS类型检测工具</a>或TypeScript）对整个应用程序进行类型检查。</p>\n<p>即使你不使用这些，React也有一些内置的typechecking能力。 要在组件的props上运行typechecking，可以分配特殊的propTypes属性：</p>\n<pre><code>class Greeting extends React.Component {\n    render() {\n        return (\n            &lt;h1&gt;Hello {this.props.name}&lt;/h1&gt;\n        )\n    };\n}\nGreeting.propTypes = {\n    name: React.PropTypes.string.isRequired\n};\n</code></pre><p>React.PropTypes返回的是一系列验证函数，用于确保接收的数据类似是否是有效的。<br>在这个例子中，我们使用React.PropTypes.string.isRequire检测name是否为字符串，并且是必填的。<br>当为prop提供无效值时，JavaScript控制台中将显示警告。 出于性能原因，仅在开发模式下检查propTypes。</p>\n<p>React.PropTypes<br>下面是一个示例，其中提供了不同的验证函数：</p>\n<pre><code>MyComponent.propTypes = {\n  // 你可以定义一个js原始类型的prop,默认请情况下，这是都是可选的\n  optionalArray: React.PropTypes.array,\n  optionalBool: React.PropTypes.bool,\n  optionalFunc: React.PropTypes.func,\n  optionalNumber: React.PropTypes.number,\n  optionalObject: React.PropTypes.object,\n  optionalString: React.PropTypes.string,\n  optionalSymbol: React.PropTypes.symbol,\n\n  // 任何可以渲染的东西：数字，字符串，元素或数组（或片段）。\n  optionalNode: React.PropTypes.node,\n\n  // React元素\n  optionalElement: React.PropTypes.element,\n\n  // 你也可以声明prop是某个类的实例。 内部使用的是JS的instanceof运算符。\n  optionalMessage: React.PropTypes.instanceOf(Message),\n\n  // 你可以通过将它作为枚举来确保你的prop被限制到特定的值。\n  optionalEnum: React.PropTypes.oneOf([&apos;News&apos;, &apos;Photos&apos;]),\n\n  // 可以是许多类型之一的对象\n  optionalUnion: React.PropTypes.oneOfType([\n    React.PropTypes.string,\n    React.PropTypes.number,\n    React.PropTypes.instanceOf(Message)\n  ]),\n\n  // 某种类型的数组\n  optionalArrayOf: React.PropTypes.arrayOf(React.PropTypes.number),\n\n  // 具有某种类型的属性值的对象\n  optionalObjectOf: React.PropTypes.objectOf(React.PropTypes.number),\n\n  // 采取特定样式的对象\n  optionalObjectWithShape: React.PropTypes.shape({\n    color: React.PropTypes.string,\n    fontSize: React.PropTypes.number\n  }),\n\n  // 你可以用`isRequired`来连接到上面的任何一个类型，以确保如果没有提供props的话会显示一个警告。\n  requiredFunc: React.PropTypes.func.isRequired,\n\n  // 任何数据类型\n  requiredAny: React.PropTypes.any.isRequired,\n\n  // 您还可以指定自定义类型检查器。 如果检查失败，它应该返回一个Error对象。 不要`console.warn`或throw，因为这不会在`oneOfType`内工作。\n  customProp: function(props, propName, componentName) {\n    if (!/matchme/.test(props[propName])) {\n      return new Error(\n        &apos;Invalid prop `&apos; + propName + &apos;` supplied to&apos; +\n        &apos; `&apos; + componentName + &apos;`. Validation failed.&apos;\n      );\n    }\n  },\n\n  // 您还可以为`arrayOf`和`objectOf`提供自定义类型检查器。 如果检查失败，它应该返回一个Error对象。\n  // 检查器将为数组或对象中的每个键调用验证函数。\n  // 检查器有两个参数，第一个参数是数组或对象本身，第二个是当前项的键。\n  customArrayProp: React.PropTypes.arrayOf(function(propValue, key, componentName, location, propFullName) {\n    if (!/matchme/.test(propValue[key])) {\n      return new Error(\n        &apos;Invalid prop `&apos; + propFullName + &apos;` supplied to&apos; +\n        &apos; `&apos; + componentName + &apos;`. Validation failed.&apos;\n      );\n    }\n  })\n};\n</code></pre><p>要求只能是单个子元素</p>\n<p>使用React.PropTypes.element，您可以指定只有一个子元素可以作为内容传递的组件。</p>\n<pre><code>class MyComponent extends React.Component {\n    render() {\n        // 只能包含一个子元素，否则会给出警告\n        const children = this.props.children;\n        return (\n            &lt;div&gt;{children}&lt;/div&gt;\n        );\n    }\n}\n\nMyComponent.propTypes = {\n    children: React.PropTypes.element.isRequired\n}\n</code></pre><p>设置Prop默认值</p>\n<p>您可以通过使用defaultProps属性来定义props的默认值：</p>\n<pre><code>class Greeting extends React.Component {\n    render() {\n        return &lt;h1&gt;hello {this.props.name}&lt;/h1&gt;;\n    };\n}\n</code></pre><p>如果name没有传值，则会将name设置为默认的zhangyatao</p>\n<pre><code>Greeting.defaultProps = {\n    name: &apos;zhangyatao&apos;\n}\n\n// 会渲染处&lt;h1&gt;hi zhangyatao&lt;/h1&gt;\nReactDOM.render(\n    &lt;Greeting /&gt;,\n    document.getElementById(&apos;root&apos;)\n)\n</code></pre><p>如果父组件没有设置并传入name，defaultProps将确保this.props.name将有一个默认值。 propTypes类型检查发生在defaultProps解析之后，因此类型检查也将应用于defaultProps。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>随着你的应用的变得越来越大，你可以通过typechecking来找到更多的bug。 对于某些应用，您可以使用JavaScript扩展（如Flow<a href=\"/2017/12/20/Flow-JS类型检测工具/\" title=\"Flow-JS类型检测工具\">Flow-JS类型检测工具</a>或TypeScript）对整个应用程序进行类型检查。</p>\n<p>即使你不使用这些，React也有一些内置的typechecking能力。 要在组件的props上运行typechecking，可以分配特殊的propTypes属性：</p>\n<pre><code>class Greeting extends React.Component {\n    render() {\n        return (\n            &lt;h1&gt;Hello {this.props.name}&lt;/h1&gt;\n        )\n    };\n}\nGreeting.propTypes = {\n    name: React.PropTypes.string.isRequired\n};\n</code></pre><p>React.PropTypes返回的是一系列验证函数，用于确保接收的数据类似是否是有效的。<br>在这个例子中，我们使用React.PropTypes.string.isRequire检测name是否为字符串，并且是必填的。<br>当为prop提供无效值时，JavaScript控制台中将显示警告。 出于性能原因，仅在开发模式下检查propTypes。</p>\n<p>React.PropTypes<br>下面是一个示例，其中提供了不同的验证函数：</p>\n<pre><code>MyComponent.propTypes = {\n  // 你可以定义一个js原始类型的prop,默认请情况下，这是都是可选的\n  optionalArray: React.PropTypes.array,\n  optionalBool: React.PropTypes.bool,\n  optionalFunc: React.PropTypes.func,\n  optionalNumber: React.PropTypes.number,\n  optionalObject: React.PropTypes.object,\n  optionalString: React.PropTypes.string,\n  optionalSymbol: React.PropTypes.symbol,\n\n  // 任何可以渲染的东西：数字，字符串，元素或数组（或片段）。\n  optionalNode: React.PropTypes.node,\n\n  // React元素\n  optionalElement: React.PropTypes.element,\n\n  // 你也可以声明prop是某个类的实例。 内部使用的是JS的instanceof运算符。\n  optionalMessage: React.PropTypes.instanceOf(Message),\n\n  // 你可以通过将它作为枚举来确保你的prop被限制到特定的值。\n  optionalEnum: React.PropTypes.oneOf([&apos;News&apos;, &apos;Photos&apos;]),\n\n  // 可以是许多类型之一的对象\n  optionalUnion: React.PropTypes.oneOfType([\n    React.PropTypes.string,\n    React.PropTypes.number,\n    React.PropTypes.instanceOf(Message)\n  ]),\n\n  // 某种类型的数组\n  optionalArrayOf: React.PropTypes.arrayOf(React.PropTypes.number),\n\n  // 具有某种类型的属性值的对象\n  optionalObjectOf: React.PropTypes.objectOf(React.PropTypes.number),\n\n  // 采取特定样式的对象\n  optionalObjectWithShape: React.PropTypes.shape({\n    color: React.PropTypes.string,\n    fontSize: React.PropTypes.number\n  }),\n\n  // 你可以用`isRequired`来连接到上面的任何一个类型，以确保如果没有提供props的话会显示一个警告。\n  requiredFunc: React.PropTypes.func.isRequired,\n\n  // 任何数据类型\n  requiredAny: React.PropTypes.any.isRequired,\n\n  // 您还可以指定自定义类型检查器。 如果检查失败，它应该返回一个Error对象。 不要`console.warn`或throw，因为这不会在`oneOfType`内工作。\n  customProp: function(props, propName, componentName) {\n    if (!/matchme/.test(props[propName])) {\n      return new Error(\n        &apos;Invalid prop `&apos; + propName + &apos;` supplied to&apos; +\n        &apos; `&apos; + componentName + &apos;`. Validation failed.&apos;\n      );\n    }\n  },\n\n  // 您还可以为`arrayOf`和`objectOf`提供自定义类型检查器。 如果检查失败，它应该返回一个Error对象。\n  // 检查器将为数组或对象中的每个键调用验证函数。\n  // 检查器有两个参数，第一个参数是数组或对象本身，第二个是当前项的键。\n  customArrayProp: React.PropTypes.arrayOf(function(propValue, key, componentName, location, propFullName) {\n    if (!/matchme/.test(propValue[key])) {\n      return new Error(\n        &apos;Invalid prop `&apos; + propFullName + &apos;` supplied to&apos; +\n        &apos; `&apos; + componentName + &apos;`. Validation failed.&apos;\n      );\n    }\n  })\n};\n</code></pre><p>要求只能是单个子元素</p>\n<p>使用React.PropTypes.element，您可以指定只有一个子元素可以作为内容传递的组件。</p>\n<pre><code>class MyComponent extends React.Component {\n    render() {\n        // 只能包含一个子元素，否则会给出警告\n        const children = this.props.children;\n        return (\n            &lt;div&gt;{children}&lt;/div&gt;\n        );\n    }\n}\n\nMyComponent.propTypes = {\n    children: React.PropTypes.element.isRequired\n}\n</code></pre><p>设置Prop默认值</p>\n<p>您可以通过使用defaultProps属性来定义props的默认值：</p>\n<pre><code>class Greeting extends React.Component {\n    render() {\n        return &lt;h1&gt;hello {this.props.name}&lt;/h1&gt;;\n    };\n}\n</code></pre><p>如果name没有传值，则会将name设置为默认的zhangyatao</p>\n<pre><code>Greeting.defaultProps = {\n    name: &apos;zhangyatao&apos;\n}\n\n// 会渲染处&lt;h1&gt;hi zhangyatao&lt;/h1&gt;\nReactDOM.render(\n    &lt;Greeting /&gt;,\n    document.getElementById(&apos;root&apos;)\n)\n</code></pre><p>如果父组件没有设置并传入name，defaultProps将确保this.props.name将有一个默认值。 propTypes类型检查发生在defaultProps解析之后，因此类型检查也将应用于defaultProps。</p>\n"},{"title":"热更新demo","date":"2018-01-30T02:20:33.000Z","_content":"## code-push 热更新 js css html 和图片\n\n[go demo](https://github.com/WillCoco/codePushDemo.git)\n\n### 1.安装code-push-cli\n\n    $ npm install -g code-push-cli\n\n### 2.注册账号\n\n    $ code-push register\n\n    这时候会自动启动浏览器打开网页并提供一个codePush AccessKey，然后命令行里出现需要输入access key 进行登录\n\n### 3.添加一个CodePush应用\n\n    code-push app add <appName> <platform> react-native\n\n    获得 deployment-key（Production是对应生产环境的，Staging是对应开发环境的）：\n\n![Demo](https://raw.githubusercontent.com/WillCoco/codePushDemo/master/pic/deployment_key.png)\n\n### 4.react-native应用接入code-push\n\n    $ npm install react-native-code-push --save\n    $ react-native link react-native-code-push\n\n    然后在项目中：\n\n    import codePush from 'react-native-code-push';\n\n    componentDidMount() {\n      codePush.checkForUpdate(deploymentKey).then((update)=>{\n          if(!update){\n              Alert.alert(\"提示\",\"已是最新版本--\",[\n                  {text:\"Ok\", onPress:()=>{\n                      console.log(\"点了OK\");\n                  }}\n              ]);\n          }\n          else{\n              codePush.sync({\n                  deploymentKey,\n                  updateDialog: {\n                      optionalIgnoreButtonLabel: '稍后',\n                      optionalInstallButtonLabel: '后台更新',\n                      optionalUpdateMessage: '有新版本了，是否更新？',\n                      title: '更新提示'\n                  },\n                  installMode: codePush.InstallMode.IMMEDIATE\n              });\n          }\n      })\n    }\n\n    其中deploymentKey就是之前获得的\n\n### 修改代码\n\n    巴拉巴拉\n\n### 发布更新\n\n    code-push release-react <appName> <platform>\n\n    或者更复杂的：\n\n    code-push release-react MyApp-iOS ios  --t 1.0.0 --dev false --d Production --des \"1.优化操作流程\" --m true\n\n    其中参数–t为二进制(.ipa与apk)安装包的的版本；–dev为是否启用开发者模式(默认为false)；–d是要发布更新的环境分Production与Staging(默认为Staging)；–des为更新说明；–m 是强制更新。\n\n更多信息请看[官方文档](https://github.com/Microsoft/react-native-code-push)\n","source":"_posts/热更新demo.md","raw":"---\ntitle: 热更新demo\ndate: 2018-01-30 10:20:33\ntags: [react-native, javascript]\n---\n## code-push 热更新 js css html 和图片\n\n[go demo](https://github.com/WillCoco/codePushDemo.git)\n\n### 1.安装code-push-cli\n\n    $ npm install -g code-push-cli\n\n### 2.注册账号\n\n    $ code-push register\n\n    这时候会自动启动浏览器打开网页并提供一个codePush AccessKey，然后命令行里出现需要输入access key 进行登录\n\n### 3.添加一个CodePush应用\n\n    code-push app add <appName> <platform> react-native\n\n    获得 deployment-key（Production是对应生产环境的，Staging是对应开发环境的）：\n\n![Demo](https://raw.githubusercontent.com/WillCoco/codePushDemo/master/pic/deployment_key.png)\n\n### 4.react-native应用接入code-push\n\n    $ npm install react-native-code-push --save\n    $ react-native link react-native-code-push\n\n    然后在项目中：\n\n    import codePush from 'react-native-code-push';\n\n    componentDidMount() {\n      codePush.checkForUpdate(deploymentKey).then((update)=>{\n          if(!update){\n              Alert.alert(\"提示\",\"已是最新版本--\",[\n                  {text:\"Ok\", onPress:()=>{\n                      console.log(\"点了OK\");\n                  }}\n              ]);\n          }\n          else{\n              codePush.sync({\n                  deploymentKey,\n                  updateDialog: {\n                      optionalIgnoreButtonLabel: '稍后',\n                      optionalInstallButtonLabel: '后台更新',\n                      optionalUpdateMessage: '有新版本了，是否更新？',\n                      title: '更新提示'\n                  },\n                  installMode: codePush.InstallMode.IMMEDIATE\n              });\n          }\n      })\n    }\n\n    其中deploymentKey就是之前获得的\n\n### 修改代码\n\n    巴拉巴拉\n\n### 发布更新\n\n    code-push release-react <appName> <platform>\n\n    或者更复杂的：\n\n    code-push release-react MyApp-iOS ios  --t 1.0.0 --dev false --d Production --des \"1.优化操作流程\" --m true\n\n    其中参数–t为二进制(.ipa与apk)安装包的的版本；–dev为是否启用开发者模式(默认为false)；–d是要发布更新的环境分Production与Staging(默认为Staging)；–des为更新说明；–m 是强制更新。\n\n更多信息请看[官方文档](https://github.com/Microsoft/react-native-code-push)\n","slug":"热更新demo","published":1,"updated":"2018-01-30T02:28:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdn2vf3u000e4g2qi6edbg1z","content":"<h2 id=\"code-push-热更新-js-css-html-和图片\"><a href=\"#code-push-热更新-js-css-html-和图片\" class=\"headerlink\" title=\"code-push 热更新 js css html 和图片\"></a>code-push 热更新 js css html 和图片</h2><p><a href=\"https://github.com/WillCoco/codePushDemo.git\" target=\"_blank\" rel=\"external\">go demo</a></p>\n<h3 id=\"1-安装code-push-cli\"><a href=\"#1-安装code-push-cli\" class=\"headerlink\" title=\"1.安装code-push-cli\"></a>1.安装code-push-cli</h3><pre><code>$ npm install -g code-push-cli\n</code></pre><h3 id=\"2-注册账号\"><a href=\"#2-注册账号\" class=\"headerlink\" title=\"2.注册账号\"></a>2.注册账号</h3><pre><code>$ code-push register\n\n这时候会自动启动浏览器打开网页并提供一个codePush AccessKey，然后命令行里出现需要输入access key 进行登录\n</code></pre><h3 id=\"3-添加一个CodePush应用\"><a href=\"#3-添加一个CodePush应用\" class=\"headerlink\" title=\"3.添加一个CodePush应用\"></a>3.添加一个CodePush应用</h3><pre><code>code-push app add &lt;appName&gt; &lt;platform&gt; react-native\n\n获得 deployment-key（Production是对应生产环境的，Staging是对应开发环境的）：\n</code></pre><p><img src=\"https://raw.githubusercontent.com/WillCoco/codePushDemo/master/pic/deployment_key.png\" alt=\"Demo\"></p>\n<h3 id=\"4-react-native应用接入code-push\"><a href=\"#4-react-native应用接入code-push\" class=\"headerlink\" title=\"4.react-native应用接入code-push\"></a>4.react-native应用接入code-push</h3><pre><code>$ npm install react-native-code-push --save\n$ react-native link react-native-code-push\n\n然后在项目中：\n\nimport codePush from &apos;react-native-code-push&apos;;\n\ncomponentDidMount() {\n  codePush.checkForUpdate(deploymentKey).then((update)=&gt;{\n      if(!update){\n          Alert.alert(&quot;提示&quot;,&quot;已是最新版本--&quot;,[\n              {text:&quot;Ok&quot;, onPress:()=&gt;{\n                  console.log(&quot;点了OK&quot;);\n              }}\n          ]);\n      }\n      else{\n          codePush.sync({\n              deploymentKey,\n              updateDialog: {\n                  optionalIgnoreButtonLabel: &apos;稍后&apos;,\n                  optionalInstallButtonLabel: &apos;后台更新&apos;,\n                  optionalUpdateMessage: &apos;有新版本了，是否更新？&apos;,\n                  title: &apos;更新提示&apos;\n              },\n              installMode: codePush.InstallMode.IMMEDIATE\n          });\n      }\n  })\n}\n\n其中deploymentKey就是之前获得的\n</code></pre><h3 id=\"修改代码\"><a href=\"#修改代码\" class=\"headerlink\" title=\"修改代码\"></a>修改代码</h3><pre><code>巴拉巴拉\n</code></pre><h3 id=\"发布更新\"><a href=\"#发布更新\" class=\"headerlink\" title=\"发布更新\"></a>发布更新</h3><pre><code>code-push release-react &lt;appName&gt; &lt;platform&gt;\n\n或者更复杂的：\n\ncode-push release-react MyApp-iOS ios  --t 1.0.0 --dev false --d Production --des &quot;1.优化操作流程&quot; --m true\n\n其中参数–t为二进制(.ipa与apk)安装包的的版本；–dev为是否启用开发者模式(默认为false)；–d是要发布更新的环境分Production与Staging(默认为Staging)；–des为更新说明；–m 是强制更新。\n</code></pre><p>更多信息请看<a href=\"https://github.com/Microsoft/react-native-code-push\" target=\"_blank\" rel=\"external\">官方文档</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"code-push-热更新-js-css-html-和图片\"><a href=\"#code-push-热更新-js-css-html-和图片\" class=\"headerlink\" title=\"code-push 热更新 js css html 和图片\"></a>code-push 热更新 js css html 和图片</h2><p><a href=\"https://github.com/WillCoco/codePushDemo.git\" target=\"_blank\" rel=\"external\">go demo</a></p>\n<h3 id=\"1-安装code-push-cli\"><a href=\"#1-安装code-push-cli\" class=\"headerlink\" title=\"1.安装code-push-cli\"></a>1.安装code-push-cli</h3><pre><code>$ npm install -g code-push-cli\n</code></pre><h3 id=\"2-注册账号\"><a href=\"#2-注册账号\" class=\"headerlink\" title=\"2.注册账号\"></a>2.注册账号</h3><pre><code>$ code-push register\n\n这时候会自动启动浏览器打开网页并提供一个codePush AccessKey，然后命令行里出现需要输入access key 进行登录\n</code></pre><h3 id=\"3-添加一个CodePush应用\"><a href=\"#3-添加一个CodePush应用\" class=\"headerlink\" title=\"3.添加一个CodePush应用\"></a>3.添加一个CodePush应用</h3><pre><code>code-push app add &lt;appName&gt; &lt;platform&gt; react-native\n\n获得 deployment-key（Production是对应生产环境的，Staging是对应开发环境的）：\n</code></pre><p><img src=\"https://raw.githubusercontent.com/WillCoco/codePushDemo/master/pic/deployment_key.png\" alt=\"Demo\"></p>\n<h3 id=\"4-react-native应用接入code-push\"><a href=\"#4-react-native应用接入code-push\" class=\"headerlink\" title=\"4.react-native应用接入code-push\"></a>4.react-native应用接入code-push</h3><pre><code>$ npm install react-native-code-push --save\n$ react-native link react-native-code-push\n\n然后在项目中：\n\nimport codePush from &apos;react-native-code-push&apos;;\n\ncomponentDidMount() {\n  codePush.checkForUpdate(deploymentKey).then((update)=&gt;{\n      if(!update){\n          Alert.alert(&quot;提示&quot;,&quot;已是最新版本--&quot;,[\n              {text:&quot;Ok&quot;, onPress:()=&gt;{\n                  console.log(&quot;点了OK&quot;);\n              }}\n          ]);\n      }\n      else{\n          codePush.sync({\n              deploymentKey,\n              updateDialog: {\n                  optionalIgnoreButtonLabel: &apos;稍后&apos;,\n                  optionalInstallButtonLabel: &apos;后台更新&apos;,\n                  optionalUpdateMessage: &apos;有新版本了，是否更新？&apos;,\n                  title: &apos;更新提示&apos;\n              },\n              installMode: codePush.InstallMode.IMMEDIATE\n          });\n      }\n  })\n}\n\n其中deploymentKey就是之前获得的\n</code></pre><h3 id=\"修改代码\"><a href=\"#修改代码\" class=\"headerlink\" title=\"修改代码\"></a>修改代码</h3><pre><code>巴拉巴拉\n</code></pre><h3 id=\"发布更新\"><a href=\"#发布更新\" class=\"headerlink\" title=\"发布更新\"></a>发布更新</h3><pre><code>code-push release-react &lt;appName&gt; &lt;platform&gt;\n\n或者更复杂的：\n\ncode-push release-react MyApp-iOS ios  --t 1.0.0 --dev false --d Production --des &quot;1.优化操作流程&quot; --m true\n\n其中参数–t为二进制(.ipa与apk)安装包的的版本；–dev为是否启用开发者模式(默认为false)；–d是要发布更新的环境分Production与Staging(默认为Staging)；–des为更新说明；–m 是强制更新。\n</code></pre><p>更多信息请看<a href=\"https://github.com/Microsoft/react-native-code-push\" target=\"_blank\" rel=\"external\">官方文档</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjdn2vf3i00074g2qrku7iiuu","category_id":"cjdn2vf3b00044g2q2l56zzce","_id":"cjdn2vf3v000f4g2q1hd3p22n"},{"post_id":"cjdn2vf2w00004g2qb737flo8","category_id":"cjdn2vf3b00044g2q2l56zzce","_id":"cjdn2vf3y000i4g2q43gec2xc"},{"post_id":"cjdn2vf3d00064g2qpqjprk0q","category_id":"cjdn2vf3b00044g2q2l56zzce","_id":"cjdn2vf3y000j4g2q4u72536j"},{"post_id":"cjdn2vf3k00084g2quvhi4em5","category_id":"cjdn2vf3w000g4g2qm5bu8c1t","_id":"cjdn2vf42000r4g2qn5fiwt6e"},{"post_id":"cjdn2vf3k00084g2quvhi4em5","category_id":"cjdn2vf3z000l4g2q88m9nrwc","_id":"cjdn2vf42000t4g2qcv6voxtt"}],"PostTag":[{"post_id":"cjdn2vf2w00004g2qb737flo8","tag_id":"cjdn2vf3c00054g2qbgvei9cu","_id":"cjdn2vf3s000b4g2qwml6mf0t"},{"post_id":"cjdn2vf3k00084g2quvhi4em5","tag_id":"cjdn2vf3c00054g2qbgvei9cu","_id":"cjdn2vf3t000d4g2qd83fvx8j"},{"post_id":"cjdn2vf3400024g2qg8c1pduz","tag_id":"cjdn2vf3m000a4g2qxl44xlvy","_id":"cjdn2vf3z000m4g2qs35k3rmw"},{"post_id":"cjdn2vf3400024g2qg8c1pduz","tag_id":"cjdn2vf3w000h4g2qe8mqhyww","_id":"cjdn2vf3z000n4g2qthzattm2"},{"post_id":"cjdn2vf3d00064g2qpqjprk0q","tag_id":"cjdn2vf3y000k4g2q6d2h56zj","_id":"cjdn2vf40000p4g2qg1tuauw4"},{"post_id":"cjdn2vf3i00074g2qrku7iiuu","tag_id":"cjdn2vf3w000h4g2qe8mqhyww","_id":"cjdn2vf42000s4g2qgnesdgdv"},{"post_id":"cjdn2vf3s000c4g2qra7b2jju","tag_id":"cjdn2vf3w000h4g2qe8mqhyww","_id":"cjdn2vf42000v4g2qspyins9i"},{"post_id":"cjdn2vf3s000c4g2qra7b2jju","tag_id":"cjdn2vf3m000a4g2qxl44xlvy","_id":"cjdn2vf42000w4g2q59q1w6da"},{"post_id":"cjdn2vf3u000e4g2qi6edbg1z","tag_id":"cjdn2vf42000u4g2qo8pv6kk1","_id":"cjdn2vf42000x4g2qi60c9lth"},{"post_id":"cjdn2vf3u000e4g2qi6edbg1z","tag_id":"cjdn2vf3m000a4g2qxl44xlvy","_id":"cjdn2vf42000y4g2qml612qqp"}],"Tag":[{"name":"datebase","_id":"cjdn2vf3c00054g2qbgvei9cu"},{"name":"javascript","_id":"cjdn2vf3m000a4g2qxl44xlvy"},{"name":"react","_id":"cjdn2vf3w000h4g2qe8mqhyww"},{"name":"electron","_id":"cjdn2vf3y000k4g2q6d2h56zj"},{"name":"react-native","_id":"cjdn2vf42000u4g2qo8pv6kk1"}]}}